using System;
using System.Net;
using System.Threading.Tasks;

namespace BaiTapCuoiKy
{
    // Simple NetworkManager without external dependencies.
    // It attempts to discover the public IP and exposes an address for clients to connect.
    public class NetworkManager
    {
        public event Action<string> LogMessage;
        public event Action<string> ErrorOccurred;

        public string PublicIP { get; private set; }
        public int MappedPort { get; private set; } = 7777;
        private bool _isInitialized = false;

        public async Task Initialize()
        {
            try
            {
                if (_isInitialized) return;

                // Try to get public IP via a simple web service. This may fail if offline.
                try
                {
                    using (var wc = new WebClient())
                    {
                        // Common public IP echo service; you can replace by your own if needed.
                        PublicIP = (await wc.DownloadStringTaskAsync(new Uri("http://checkip.amazonaws.com/"))).Trim();
                        LogMessage?.Invoke($"Public IP detected: {PublicIP}");
                    }
                }
                catch (Exception ex)
                {
                    ErrorOccurred?.Invoke($"Could not determine public IP automatically: {ex.Message}");
                    PublicIP = GetLocalIPAddress();
                }

                // No UPnP mapping performed (library not available). Inform the user.
                LogMessage?.Invoke("Note: UPnP port mapping not configured. If connecting over the Internet, forward port 7777 manually on your router.");

                _isInitialized = true;
            }
            catch (Exception ex)
            {
                ErrorOccurred?.Invoke($"Network initialization failed: {ex.Message}");
                PublicIP = GetLocalIPAddress();
            }
        }

        public string GetConnectionAddress()
        {
            return string.IsNullOrWhiteSpace(PublicIP) ? GetLocalIPAddress() : PublicIP;
        }

        public async Task Cleanup()
        {
            // No port mapping to remove; kept for API compatibility.
            await Task.CompletedTask;
        }

        private string GetLocalIPAddress()
        {
            try
            {
                var host = Dns.GetHostEntry(Dns.GetHostName());
                foreach (var ip in host.AddressList)
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        return ip.ToString();
                    }
                }
            }
            catch { }
            return "127.0.0.1";
        }
    }
}