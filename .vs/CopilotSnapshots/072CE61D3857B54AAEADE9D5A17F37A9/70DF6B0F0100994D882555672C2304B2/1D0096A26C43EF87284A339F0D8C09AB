using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;
using System.Threading.Tasks;
using System.Threading;

namespace BaiTapCuoiKy
{
    public class GameServer
    {
        private TcpListener _listener;
        private readonly List<TcpClient> _clients = new List<TcpClient>();
        private readonly object _clientsLock = new object();
        private readonly int _port;
        private bool _isRunning = false;
        private CancellationTokenSource _cancellationTokenSource;

        public event Action<string> ServerLog;
        public event Action<TcpClient, NetworkData> DataReceived;

        public int ConnectedClientsCount 
        { 
            get 
            { 
                lock (_clientsLock) 
                { 
                    return _clients.Count; 
                } 
            } 
        }

        public bool IsRunning => _isRunning;

        public GameServer(int port)
        {
            _port = port;
        }

        public void Start()
        {
            try
            {
                if (_isRunning)
                {
                    ServerLog?.Invoke("Server is already running.");
                    return;
                }

                _cancellationTokenSource = new CancellationTokenSource();
                _listener = new TcpListener(IPAddress.Any, _port);
                _listener.Start();
                _isRunning = true;
                
                ServerLog?.Invoke($"🚀 Server started on port {_port}. Waiting for connections...");
                
                // Start listening for clients in background
                Task.Run(() => ListenForClientsAsync());
            }
            catch (Exception ex)
            {
                ServerLog?.Invoke($"❌ Error starting server: {ex.Message}");
                _isRunning = false;
            }
        }

        private async Task ListenForClientsAsync()
        {
            try
            {
                while (_isRunning)
                {
                    try
                    {
                        var client = await _listener.AcceptTcpClientAsync();
                        
                        if (client != null)
                        {
                            lock (_clientsLock)
                            {
                                _clients.Add(client);
                            }
                            
                            var clientEndpoint = client.Client.RemoteEndPoint as IPEndPoint;
                            var clientAddress = clientEndpoint?.Address?.ToString() ?? "Unknown";
                            
                            ServerLog?.Invoke($"👤 New client connected: {clientAddress} (Total: {ConnectedClientsCount})");
                            
                            // Handle each client in separate task
                            Task.Run(() => HandleClientAsync(client));
                        }
                    }
                    catch (ObjectDisposedException)
                    {
                        // Expected when server is stopping
                        break;
                    }
                    catch (InvalidOperationException)
                    {
                        // Expected when listener is stopped
                        break;
                    }
                    catch (Exception ex)
                    {
                        if (_isRunning)
                        {
                            ServerLog?.Invoke($"⚠️ Error accepting client: {ex.Message}");
                            await Task.Delay(1000);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ServerLog?.Invoke($"❌ Fatal error in ListenForClients: {ex.Message}");
            }
        }

        private async Task HandleClientAsync(TcpClient client)
        {
            NetworkStream stream = null;
            var clientEndpoint = client?.Client?.RemoteEndPoint as IPEndPoint;
            var clientAddress = clientEndpoint?.Address?.ToString() ?? "Unknown";
            
            try
            {
                stream = client.GetStream();
                byte[] buffer = new byte[4096];
                
                ServerLog?.Invoke($"📞 Started handling client: {clientAddress}");
                
                while (_isRunning && client.Connected)
                {
                    try
                    {
                        int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);
                        
                        if (bytesRead == 0)
                        {
                            ServerLog?.Invoke($"📴 Client disconnected gracefully: {clientAddress}");
                            break;
                        }

                        byte[] receivedBytes = new byte[bytesRead];
                        Array.Copy(buffer, receivedBytes, bytesRead);
                        
                        try
                        {
                            NetworkData data = NetworkData.FromBytes(receivedBytes);
                            DataReceived?.Invoke(client, data);
                            ServerLog?.Invoke($"📨 Received {data.Command} from {data.SenderName} ({clientAddress})");
                        }
                        catch (Exception dataEx)
                        {
                            ServerLog?.Invoke($"⚠️ Error deserializing data from {clientAddress}: {dataEx.Message}");
                        }
                    }
                    catch (Exception readEx)
                    {
                        ServerLog?.Invoke($"⚠️ Error reading from client {clientAddress}: {readEx.Message}");
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                ServerLog?.Invoke($"❌ Error handling client {clientAddress}: {ex.Message}");
            }
            finally
            {
                RemoveClient(client, clientAddress);
            }
        }

        public async Task BroadcastAsync(NetworkData data, TcpClient excludeClient = null)
        {
            if (data == null)
            {
                ServerLog?.Invoke("⚠️ Attempted to broadcast null data");
                return;
            }

            try
            {
                byte[] bytesToSend = data.ToBytes();
                List<TcpClient> clientsCopy;
                
                lock (_clientsLock)
                {
                    clientsCopy = new List<TcpClient>(_clients);
                }

                var broadcastTasks = new List<Task>();
                int successCount = 0;
                int failureCount = 0;
                var lockObject = new object();

                foreach (var client in clientsCopy)
                {
                    if (client == excludeClient || !client.Connected)
                        continue;

                    var broadcastTask = Task.Run(async () =>
                    {
                        try
                        {
                            NetworkStream stream = client.GetStream();
                            await stream.WriteAsync(bytesToSend, 0, bytesToSend.Length);
                            await stream.FlushAsync();
                            
                            lock (lockObject)
                            {
                                successCount++;
                            }
                        }
                        catch (Exception ex)
                        {
                            lock (lockObject)
                            {
                                failureCount++;
                            }
                            
                            var clientEndpoint = client?.Client?.RemoteEndPoint as IPEndPoint;
                            var clientAddress = clientEndpoint?.Address?.ToString() ?? "Unknown";
                            
                            ServerLog?.Invoke($"⚠️ Error broadcasting to {clientAddress}: {ex.Message}");
                            RemoveClient(client, clientAddress);
                        }
                    });
                    
                    broadcastTasks.Add(broadcastTask);
                }

                if (broadcastTasks.Count > 0)
                {
                    await Task.WhenAll(broadcastTasks);
                    ServerLog?.Invoke($"📡 Broadcast completed: {successCount} success, {failureCount} failures");
                }
            }
            catch (Exception ex)
            {
                ServerLog?.Invoke($"❌ Critical error in BroadcastAsync: {ex.Message}");
            }
        }

        private void RemoveClient(TcpClient client, string clientAddress = null)
        {
            if (client == null) return;

            try
            {
                bool wasRemoved = false;
                lock (_clientsLock)
                {
                    if (_clients.Contains(client))
                    {
                        _clients.Remove(client);
                        wasRemoved = true;
                    }
                }

                if (wasRemoved)
                {
                    var address = clientAddress ?? "Unknown";
                    ServerLog?.Invoke($"👋 Client removed: {address} (Remaining: {ConnectedClientsCount})");
                }

                try
                {
                    client.Close();
                }
                catch (Exception ex)
                {
                    ServerLog?.Invoke($"⚠️ Error closing client connection: {ex.Message}");
                }
            }
            catch (Exception ex)
            {
                ServerLog?.Invoke($"❌ Error in RemoveClient: {ex.Message}");
            }
        }

        public void Stop()
        {
            try
            {
                if (!_isRunning)
                {
                    ServerLog?.Invoke("Server is already stopped.");
                    return;
                }

                ServerLog?.Invoke("🛑 Stopping server...");
                _isRunning = false;

                _cancellationTokenSource?.Cancel();

                try
                {
                    _listener?.Stop();
                }
                catch (Exception ex)
                {
                    ServerLog?.Invoke($"⚠️ Error stopping listener: {ex.Message}");
                }

                List<TcpClient> clientsCopy;
                lock (_clientsLock)
                {
                    clientsCopy = new List<TcpClient>(_clients);
                    _clients.Clear();
                }

                foreach (var client in clientsCopy)
                {
                    try
                    {
                        client.Close();
                    }
                    catch (Exception ex)
                    {
                        ServerLog?.Invoke($"⚠️ Error closing client: {ex.Message}");
                    }
                }

                try
                {
                    _cancellationTokenSource?.Dispose();
                    _cancellationTokenSource = null;
                }
                catch (Exception ex)
                {
                    ServerLog?.Invoke($"⚠️ Error disposing cancellation token: {ex.Message}");
                }

                ServerLog?.Invoke("✅ Server stopped successfully.");
            }
            catch (Exception ex)
            {
                ServerLog?.Invoke($"❌ Error stopping server: {ex.Message}");
            }
        }

        public void DisconnectClient(TcpClient client)
        {
            if (client != null)
            {
                var clientEndpoint = client.Client?.RemoteEndPoint as IPEndPoint;
                var clientAddress = clientEndpoint?.Address?.ToString() ?? "Unknown";
                RemoveClient(client, clientAddress);
            }
        }

        public List<string> GetConnectedClientAddresses()
        {
            var addresses = new List<string>();
            lock (_clientsLock)
            {
                foreach (var client in _clients)
                {
                    try
                    {
                        if (client.Connected)
                        {
                            var endpoint = client.Client.RemoteEndPoint as IPEndPoint;
                            if (endpoint != null)
                            {
                                addresses.Add(endpoint.Address.ToString());
                            }
                        }
                    }
                    catch
                    {
                        // Skip clients with invalid endpoints
                    }
                }
            }
            return addresses;
        }
    }
}
