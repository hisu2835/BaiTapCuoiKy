using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net.Sockets;

namespace BaiTapCuoiKy
{
    public partial class Form1 : Form
    {
        #region Fields and Properties
        
        private string currentUser;
        private bool isInGame = false;
        private bool isInWaitingRoom = true;
        private bool isInLobby = false;  // NEW: Trạng thái lobby trung gian
        private int availableHints = 3;
        private int winStreak = 0;
        private Random random = new Random();
        private string[] wordBank;
        
        // UI Components for the waiting room
        private Panel welcomePanel;
        private Label welcomeLabel;
        private Label userStatsLabel;
        private Button createRoomButton;
        private Button joinRoomButton;
        private Button logoutButton;
        private TextBox roomCodeTextBox;
        private Label roomCodeLabel;
        private Panel gameStatsPanel;

        // NEW: UI Components for lobby layout
        private Panel lobbyPanel;
        private Timer lobbyAnimationTimer;
        private Button btnStartGameLobby;
        private Button btnLeaveLobby;
        private Button btnInvitePlayers;
        private Label lblLobbyStatus;
        private ListView listViewLobbyPlayers;
        private Panel panelLobbyChat;
        private ListBox listBoxLobbyChat;
        private TextBox txtLobbyChat;
        private Button btnSendLobbyChat;

        // Drawing variables
        private bool isDrawing = false;
        private Point lastPoint;
        private Bitmap drawingBitmap;
        private Graphics drawingGraphics;
        private Color currentColor = Color.Black;
        private int brushSize = 3;
        private bool isEraserMode = false;

        // Game state variables
        private string currentWord = "";
        private int gameTimeLeft = 60;
        private int currentRound = 1;
        private int maxRounds = 5;
        private int playerScore = 0;
        private bool isPlayerDrawing = false;
        private List<PlayerInfo> connectedPlayers = new List<PlayerInfo>();
        private string currentRoomCode = "";
        private GameSettings currentGameSettings; // NEW: Lưu settings của phòng

        // Enhanced UI Components
        private Timer animationTimer;
        private List<SimpleParticle> particles = new List<SimpleParticle>();
        
        // Theme colors
        private readonly Dictionary<string, ThemeColors> gameThemes = new Dictionary<string, ThemeColors>
        {
            ["Ocean"] = new ThemeColors
            {
                Primary = Color.FromArgb(59, 130, 246),
                Secondary = Color.FromArgb(147, 197, 253),
                Accent = Color.FromArgb(30, 64, 175),
                Background = Color.FromArgb(239, 246, 255),
                Text = Color.FromArgb(30, 58, 138)
            }
        };
        
        private ThemeColors currentTheme;
        private GameViewControl gameView; // NEW - embedded game UI
        private Timer gameTimer; // Timer để cập nhật game

        // Networking
        private GameServer gameServer;
        private GameClient gameClient;
        private bool isHost = false;
        private NetworkManager networkManager; // Network manager for public IP detection

        #endregion

        #region Supporting Classes

        public class ThemeColors
        {
            public Color Primary { get; set; }
            public Color Secondary { get; set; }
            public Color Accent { get; set; }
            public Color Background { get; set; }
            public Color Text { get; set; }
        }

        public class PlayerInfo
        {
            public string Name { get; set; }
            public int Score { get; set; }
            public bool IsDrawing { get; set; }
            public bool IsOnline { get; set; }
            public DateTime LastActivity { get; set; }
            public Image Avatar { get; set; }

            public PlayerInfo(string name)
            {
                Name = name;
                Score = 0;
                IsDrawing = false;
                IsOnline = true;
                LastActivity = DateTime.Now;
                Avatar = GenerateAvatar(name);
            }

            private Image GenerateAvatar(string playerName)
            {
                Bitmap avatar = new Bitmap(60, 60);
                using (Graphics g = Graphics.FromImage(avatar))
                {
                    g.SmoothingMode = SmoothingMode.AntiAlias;
                    
                    int hash = playerName.GetHashCode();
                    Color bgColor = Color.FromArgb(
                        Math.Abs(hash % 128) + 127,
                        Math.Abs((hash >> 8) % 128) + 127,
                        Math.Abs((hash >> 16) % 128) + 127
                    );
                    
                    using (var brush = new LinearGradientBrush(
                        new Rectangle(0, 0, 60, 60),
                        bgColor,
                        Color.FromArgb(Math.Max(0, bgColor.R - 30), Math.Max(0, bgColor.G - 30), Math.Max(0, bgColor.B - 30)),
                        LinearGradientMode.Vertical))
                    {
                        g.FillEllipse(brush, 0, 0, 60, 60);
                    }
                    
                    using (var pen = new Pen(Color.White, 3))
                    {
                        g.DrawEllipse(pen, 1, 1, 58, 58);
                    }
                    
                    string initials = playerName.Length > 1 ? 
                        playerName.Substring(0, 2).ToUpper() : 
                        playerName.Substring(0, 1).ToUpper();
                    
                    using (Font font = new Font("Segoe UI", 16, FontStyle.Bold))
                    {
                        SizeF textSize = g.MeasureString(initials, font);
                        g.DrawString(initials, font, Brushes.White,
                            (60 - textSize.Width) / 2,
                            (60 - textSize.Height) / 2);
                    }
                }
                return avatar;
            }
        }

        public class GameSettings
        {
            public int MaxPlayers { get; set; } = 7;
            public int Rounds { get; set; } = 5;
            public int TimePerRound { get; set; } = 60;
            public string Difficulty { get; set; } = "Normal";
            public string RoomName { get; set; } = "";
        }

        private class SimpleParticle
        {
            public float X, Y, VX, VY;
            public Color Color;
            public float Life;
            public float Size;
            public bool IsDead => Life <= 0;
            
            public void Update()
            {
                X += VX;
                Y += VY;
                VY += 0.15f;
                Life -= 0.02f;
                Size = Math.Max(0, Size - 0.1f);
            }
        }

        #endregion

        #region Constructor and Initialization

        public Form1() : this("Guest")
        {
        }

        public Form1(string username)
        {
            try
            {
                InitializeComponent();
                currentUser = username;
                currentTheme = gameThemes["Ocean"];
                InitializeDrawingBitmap();
                // SetupInitialGameInterface(); // This is for the old UI
                LoadUserStats();
                SetupAnimationTimers();
                
                // Initially hide all game controls and show waiting room
                HideAllGameControls();
                ShowWaitingRoom();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Lỗi khởi tạo form: {ex.Message}", "Lỗi", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            toolStripStatusLabel.Text = $"🎨 Chào mừng {currentUser} đến với DrawMaster Premium! 🎨";
            
            // Debug: Add test button to force show game interface
            if (System.Diagnostics.Debugger.IsAttached)
            {
                // AddTestButton(); // Disabled for now
            }
        }

        private void SetupAnimationTimers()
        {
            animationTimer = new Timer { Interval = 50 };
            animationTimer.Tick += AnimationTimer_Tick;
            animationTimer.Start();
        }

        private void AnimationTimer_Tick(object sender, EventArgs e)
        {
            for (int i = particles.Count - 1; i >= 0; i--)
            {
                particles[i].Update();
                if (particles[i].IsDead)
                    particles.RemoveAt(i);
            }
            
            // Invalidate the appropriate panel based on current state
            if (particles.Count > 0)
            {
                if (isInWaitingRoom && welcomePanel != null)
                    welcomePanel.Invalidate();
                else if (isInLobby && lobbyPanel != null)
                    lobbyPanel.Invalidate();
            }
        }

        private void InitializeDrawingBitmap()
        {
            drawingBitmap = new Bitmap(700, 500);
            drawingGraphics = Graphics.FromImage(drawingBitmap);
            drawingGraphics.SmoothingMode = SmoothingMode.AntiAlias;
            drawingGraphics.Clear(Color.White);
        }

        private void SetupInitialGameInterface()
        {
            // This method was for the old UI built in the designer.
            // The new UI is created dynamically.
        }

        private void LoadUserStats()
        {
            if (userStatsLabel != null)
            {
                userStatsLabel.Text = $"🎮 Trận đã chơi: 0  |  ⭐ Điểm cao nhất: 0  |  🏆 Thắng: 0  |  🎯 Độ chính xác: 0%";
            }
        }

        private void HideAllGameControls()
        {
            // This method was for the old UI built in the designer.
            // The new UI is created dynamically, so we just need to remove the main panels.
        }

        private void AddTestButton()
        {
            var testButton = new Button
            {
                Text = "TEST GAME INTERFACE",
                Size = new Size(200, 30),
                Location = new Point(10, 10),
                BackColor = Color.Red,
                ForeColor = Color.White,
                Font = new Font("Arial", 8, FontStyle.Bold)
            };
            
            testButton.Click += (s, e) => {
                // Force show game interface for testing
                EnterGameRoom("TEST123", true, new GameSettings());
            };
            
            this.Controls.Add(testButton);
            testButton.BringToFront();
        }

        #endregion

        #region Drawing Events

        private void panelDrawing_MouseDown(object sender, MouseEventArgs e)
        {
            if (!isPlayerDrawing || !isInGame) return;
            
            isDrawing = true;
            lastPoint = e.Location;
        }

        private void panelDrawing_MouseMove(object sender, MouseEventArgs e)
        {
            if (!isDrawing || !isPlayerDrawing || !isInGame) return;
            
            using (var pen = new Pen(isEraserMode ? Color.White : currentColor, brushSize))
            {
                pen.StartCap = LineCap.Round;
                pen.EndCap = LineCap.Round;
                drawingGraphics.DrawLine(pen, lastPoint, e.Location);
            }
            
            lastPoint = e.Location;
            panelDrawing.Invalidate();
        }

        private void panelDrawing_MouseUp(object sender, MouseEventArgs e)
        {
            isDrawing = false;
        }

        private void panelDrawing_Paint(object sender, PaintEventArgs e)
        {
            if (drawingBitmap != null)
            {
                e.Graphics.DrawImage(drawingBitmap, 0, 0);
            }
        }

        #endregion

        #region Tool Events

        private void btnPencil_Click(object sender, EventArgs e)
        {
            isEraserMode = false;
            btnPencil.BackColor = currentTheme.Primary;
            // btnEraser.BackColor = Color.FromArgb(255, 193, 203);
        }

        private void btnEraser_Click(object sender, EventArgs e)
        {
            isEraserMode = true;
            // btnEraser.BackColor = Color.FromArgb(220, 53, 69);
            // btnPencil.BackColor = Color.FromArgb(173, 216, 230);
        }

        private void btnColor_Click(object sender, EventArgs e)
        {
            if (sender is Button colorButton)
            {
                currentColor = colorButton.BackColor;
                panelSelectedColor.BackColor = currentColor;
                isEraserMode = false;
                btnPencil.BackColor = currentTheme.Primary;
                // btnEraser.BackColor = Color.FromArgb(255, 193, 203);
            }
        }

        private void trackBarBrushSize_ValueChanged(object sender, EventArgs e)
        {
            // brushSize = trackBarBrushSize.Value;
        }

        private void btnClearCanvas_Click(object sender, EventArgs e)
        {
            if (!isPlayerDrawing) return;
            
            drawingGraphics.Clear(Color.White);
            panelDrawing.Invalidate();
        }

        #endregion

        #region Chat Events

        private void btnSendMessage_Click(object sender, EventArgs e)
        {
            SendChatMessage();
        }

        private void txtChatInput_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                SendChatMessage();
                e.Handled = true;
            }
        }

        private void SendChatMessage()
        {
            // This is the old method. New chat is handled by GameView_ChatSubmitted
            // and sends data over the network.
            string message = txtChatInput.Text.Trim();
            if (string.IsNullOrEmpty(message)) return;
            
            string chatLine = $"[{DateTime.Now:HH:mm}] {currentUser}: {message}";
            
            // Send to server instead of adding directly
            var data = new NetworkData(Command.Message, currentUser, chatLine);
            gameClient?.SendDataAsync(data);
            
            // txtChatInput.Clear();
        }

        #endregion

        #region Game Control Events

        private void btnStartGame_Click(object sender, EventArgs e)
        {
            // btnStartGame.Enabled = false;
            StartWordSelection();
        }

        private void btnLeaveGame_Click(object sender, EventArgs e)
        {
            var result = MessageBox.Show(
                "Bạn có chắc chắn muốn rời khỏi game không?",
                "Xác nhận rời game",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question
            );

            if (result == DialogResult.Yes)
            {
                gameClient?.Disconnect();
                if (isHost) gameServer?.Stop();
                ShowWaitingRoom();
            }
        }

        private void btnBackToWaitingRoom_Click(object sender, EventArgs e)
        {
            var result = MessageBox.Show(
                "Bạn có muốn quay về phòng chờ không?",
                "Quay về phòng chờ",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question
            );

            if (result == DialogResult.Yes)
            {
                gameClient?.Disconnect();
                if (isHost) gameServer?.Stop();
                ShowWaitingRoom();
            }
        }

        private void timerGame_Tick(object sender, EventArgs e)
        {
            gameTimeLeft--;
            // lblTimeLeft.Text = $"00:{gameTimeLeft:D2}";
            // progressBarTime.Value = Math.Max(0, gameTimeLeft);
            
            if (gameTimeLeft <= 0)
            {
                // timerGame.Stop();
                MessageBox.Show("? Time's up!", "Game Timer", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        #endregion

        #region Event Handlers

        private async void CreateRoomButton_Click(object sender, EventArgs e)
        {
            try
            {
                var roomDialog = new RoomCreationDialog(currentUser);
                if (roomDialog.ShowDialog() == DialogResult.OK)
                {
                    string roomCode = roomDialog.RoomCode;
                    var settings = roomDialog.GameSettings;
                    
                    // Initialize network manager (temporarily disabled)
                    // networkManager = new NetworkManager();
                    // networkManager.LogMessage += (msg) => AddLobbyMessage("Network", msg);
                    // networkManager.ErrorOccurred += (err) => AddLobbyMessage("Error", err);
                    // await networkManager.Initialize();
                    
                    // Start the server
                    isHost = true;
                    gameServer = new GameServer(7777);
                    gameServer.ServerLog += (log) => this.Invoke((MethodInvoker)delegate { 
                        AddLobbyMessage("Server", log);
                    });
                    gameServer.DataReceived += GameServer_DataReceived;
                    gameServer.Start();

                    // Connect to our own server
                    gameClient = new GameClient();
                    gameClient.DataReceived += GameClient_DataReceived;
                    
                    // Use async connection
                    Task.Run(async () => {
                        try
                        {
                            await gameClient.ConnectAsync("127.0.0.1", 7777);
                            // On successful connection, transition to lobby
                            this.Invoke((MethodInvoker)delegate {
                                // Use localhost as room code for now
                                string publicAddress = "127.0.0.1"; // networkManager?.GetConnectionAddress() ?? "127.0.0.1";
                                EnterGameRoom(publicAddress, true, settings);
                            });
                        }
                        catch (Exception ex)
                        {
                            this.Invoke((MethodInvoker)delegate {
                                MessageBox.Show($"Lỗi kết nối đến server: {ex.Message}", "Lỗi", 
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                            });
                        }
                    });
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Lỗi tạo phòng: {ex.Message}", "Lỗi", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void JoinRoomButton_Click(object sender, EventArgs e)
        {
            string roomCode = roomCodeTextBox.Text.Trim().ToUpper();
            
            if (string.IsNullOrEmpty(roomCode))
            {
                MessageBox.Show("Vui lòng nhập mã phòng (địa chỉ IP của người tạo phòng)!", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            // For simplicity, roomCode is now the IP address to connect to.
            // In a real-world scenario, you'd use a matchmaking service.
            string ipAddress = roomCode;

            isHost = false;
            gameClient = new GameClient();
            gameClient.DataReceived += GameClient_DataReceived;

            Task.Run(async () => {
                try
                {
                    await gameClient.ConnectAsync(ipAddress, 7777);
                    this.Invoke((MethodInvoker)delegate {
                        EnterGameRoom(ipAddress, false, new GameSettings());
                    });
                }
                catch (Exception ex)
                {
                    this.Invoke((MethodInvoker)delegate {
                        MessageBox.Show($"Không thể kết nối đến phòng: {ex.Message}\nHãy chắc chắn bạn đã nhập đúng địa chỉ IP của người tạo phòng.", "Lỗi kết nối", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    });
                }
            });
        }

        private async void LogoutButton_Click(object sender, EventArgs e)
        {
            var result = MessageBox.Show(
                "Bạn có chắc chắn muốn đăng xuất không?",
                "Xác nhận đăng xuất",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question
            );

            if (result == DialogResult.Yes)
            {
                // Cleanup network components
                // if (networkManager != null)
                // {
                //     Task.Run(async () => await networkManager.Cleanup());
                // }
                gameClient?.Disconnect();
                gameServer?.Stop();

                this.Close();
                
                var loginForm = new LoginForm();
                loginForm.LoginSuccessful += (username) =>
                {
                    var gameForm = new Form1(username);
                    gameForm.Show();
                };
                loginForm.Show();
            }
        }

        private void BtnInvitePlayers_Click(object sender, EventArgs e)
        {
            string connectionAddress = currentRoomCode; // networkManager?.GetConnectionAddress() ?? currentRoomCode;
            
            // Show invite dialog
            var inviteMessage = $"🎮 Mời bạn bè tham gia game!\n\n" +
                              $"📋 Địa chỉ kết nối: {connectionAddress}\n" +
                              $"🎯 Copy địa chỉ này và gửi cho bạn bè để họ có thể tham gia!";
            
            MessageBox.Show(inviteMessage, "Mời bạn bè", MessageBoxButtons.OK, MessageBoxIcon.Information);
            
            // Copy connection address to clipboard
            try
            {
                System.Windows.Forms.Clipboard.SetText(connectionAddress);
                AddLobbyMessage("System", "📋 Địa chỉ kết nối đã được copy vào clipboard!");
            }
            catch
            {
                // Ignore clipboard errors
            }
        }

        private void BtnSendLobbyChat_Click(object sender, EventArgs e)
        {
            SendLobbyMessage();
        }

        private void TxtLobbyChat_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                SendLobbyMessage();
                e.Handled = true;
            }
        }

        private void SendLobbyMessage()
        {
            string message = txtLobbyChat.Text.Trim();
            if (string.IsNullOrEmpty(message)) return;
            
            // Send to server instead of adding directly
            var data = new NetworkData(Command.Message, currentUser, message);
            gameClient?.SendDataAsync(data);
            
            txtLobbyChat.Clear();
        }

        private void AddLobbyMessage(string sender, string message)
        {
            if (listBoxLobbyChat != null)
            {
                var timestamp = DateTime.Now.ToString("HH:mm");
                string chatLine = $"[{timestamp}] {sender}: {message}";
                
                listBoxLobbyChat.Items.Add(chatLine);
                
                if (listBoxLobbyChat.Items.Count > 0)
                {
                    listBoxLobbyChat.TopIndex = listBoxLobbyChat.Items.Count - 1;
                }
                
                if (listBoxLobbyChat.Items.Count > 50)
                {
                    listBoxLobbyChat.Items.RemoveAt(0);
                }
            }
        }

        private void BtnStartGameLobby_Click(object sender, EventArgs e)
        {
            if (connectedPlayers.Count < 2)
            {
                MessageBox.Show("Cần ít nhất 2 người chơi để bắt đầu game!", "Không đủ người chơi", 
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            var result = MessageBox.Show(
                $"🎮 Bắt đầu game với {connectedPlayers.Count} người chơi?\n\n" +
                $"⚠️ Sau khi bắt đầu, không thể thêm người chơi mới!",
                "Xác nhận bắt đầu game",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question
            );

            if (result == DialogResult.Yes)
            {
                // Transition from lobby to actual game
                TransitionToGame();
            }
        }

        private void BtnLeaveLobby_Click(object sender, EventArgs e)
        {
            var result = MessageBox.Show(
                "Bạn có chắc chắn muốn rời khỏi lobby không?",
                "Xác nhận rời lobby",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question
            );

            if (result == DialogResult.Yes)
            {
                // Disconnect network components
                gameClient?.Disconnect();
                if (isHost)
                {
                    gameServer?.Stop();
                }
                ShowWaitingRoom();
            }
        }

        #endregion

        #region Networking Logic

        private void GameServer_DataReceived(TcpClient senderClient, NetworkData data)
        {
            // Server logic: process data from a client and broadcast to others
            // For now, we just broadcast everything. More complex logic can be added.
            // For example, server should validate actions.
            gameServer?.BroadcastAsync(data, null); // Broadcast to all including sender for simplicity
        }

        private void GameClient_DataReceived(NetworkData data)
        {
            // Client logic: update UI based on data from the server
            // This needs to be invoked on the UI thread
            this.Invoke((MethodInvoker)delegate {
                switch (data.Command)
                {
                    case Command.Message:
                        if (gameView != null)
                        {
                            gameView.AddChat($"💬 {data.SenderName}: {data.Payload}");
                        }
                        else if (listBoxLobbyChat != null)
                        {
                            AddLobbyMessage(data.SenderName, data.Payload.ToString());
                        }
                        break;
                    case Command.Guess:
                        if (gameView != null)
                        {
                            // If this client is the drawer, they see the guess.
                            // If they are a guesser, they see other's guesses.
                            if (isPlayerDrawing)
                            {
                                gameView.AddChat($"❓ {data.SenderName} đoán: {data.Payload}");
                            }
                            else if (data.SenderName != currentUser)
                            {
                                gameView.AddChat($"❓ {data.SenderName} đoán: {data.Payload}");
                            }
                            
                            // Server (host) checks the guess
                            if (isHost)
                            {
                                if (data.Payload.ToString().ToUpper() == currentWord.ToUpper())
                                {
                                    // Correct guess, broadcast score update etc.
                                }
                            }
                        }
                        break;
                    // Add more cases here for Draw, ScoreUpdate, etc.
                }
            });
        }

        #endregion

        #region Game Logic

        private void EnterGameRoom(string roomCode, bool isCreator, GameSettings settings = null)
        {
            try
            {
                System.Diagnostics.Debug.WriteLine($"Vào phòng: {roomCode}, isCreator: {isCreator}");
                
                currentRoomCode = roomCode;
                currentGameSettings = settings ?? new GameSettings(); // Lưu settings
                connectedPlayers.Clear();
                
                // Add current user as first player
                connectedPlayers.Add(new PlayerInfo(currentUser));
                
                // Simulate other players joining for demonstration
                if (isCreator)
                {
                    // AddSimulatedPlayers(); // Don't simulate in network mode
                }
                
                // Apply game settings if provided
                if (settings != null)
                {
                    maxRounds = settings.Rounds;
                    gameTimeLeft = settings.TimePerRound;
                }
                
                // Initialize game state
                currentRound = 1;
                playerScore = 0;
                isPlayerDrawing = false;
                
                // IMPORTANT: Show LOBBY interface first (not game interface)
                ShowLobbyInterface();
                
                // Show success message AFTER interface is ready
                this.BeginInvoke((MethodInvoker)delegate
                {
                    MessageBox.Show(
                        $"🎉 {(isCreator ? "Phòng được tạo thành công!" : "Tham gia phòng thành công!")}\n\n" +
                        $"🏠 Mã phòng (IP): {roomCode}\n" +
                        $"👥 Người chơi: {connectedPlayers.Count}/{currentGameSettings.MaxPlayers}\n" +
                        $"⏰ Đang chờ ở phòng chờ (Lobby)...\n" +
                        $"🎯 {(isCreator ? "Nhấn 'Bắt đầu game' khi sẵn sàng!" : "Chờ host bắt đầu game...")}",
                        isCreator ? "Phòng đã được tạo" : "Tham gia phòng",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Information
                    );
                });
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Lỗi khi tham gia phòng: {ex.Message}", "Lỗi", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                System.Diagnostics.Debug.WriteLine($"EnterGameRoom Exception: {ex}");
            }
        }

        private void ShowGameInterface()
        {
            // This method is now obsolete, TransitionToGame is used instead.
        }

        private void ShowDesignerControls()
        {
            // This method is now obsolete.
        }

        private void StartWordSelection()
        {
            try
            {
                if (wordBank == null)
                {
                    wordBank = new string[] {
                        "CAT", "DOG", "HOUSE", "TREE", "CAR", "BOOK", "APPLE", "STAR", 
                        "FISH", "BIRD", "FLOWER", "SUN", "MOON", "BANANA", "GUITAR", 
                        "PHONE", "COMPUTER", "CHAIR", "TABLE", "WINDOW", "DOOR", "LAMP",
                        "BOTTLE", "CUP", "PLATE", "FORK", "KNIFE", "SPOON", "BOWL"
                    };
                }
                
                var word1 = wordBank[random.Next(wordBank.Length)];
                var word2 = wordBank[random.Next(wordBank.Length)];
                
                while (word1 == word2)
                {
                    word2 = wordBank[random.Next(wordBank.Length)];
                }
                
                ShowWordSelectionDialog(word1, word2);
            }
            catch (Exception ex)
            {
                if (gameView != null)
                {
                    gameView.AddChat($"❌ Error selecting word: {ex.Message}");
                }
                else
                {
                    MessageBox.Show($"Lỗi khi chọn từ: {ex.Message}", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                System.Diagnostics.Debug.WriteLine($"StartWordSelection Exception: {ex}");
            }
        }

        private void ShowWordSelectionDialog(string word1, string word2)
        {
            var dialog = new Form
            {
                Text = "Chọn từ để vẽ",
                Size = new Size(450, 250),
                StartPosition = FormStartPosition.CenterParent,
                FormBorderStyle = FormBorderStyle.FixedDialog,
                MaximizeBox = false,
                MinimizeBox = false,
                BackColor = Color.FromArgb(240, 248, 255)
            };
            
            var titleLabel = new Label
            {
                Text = "🎨 Choose a word to draw:",
                Font = new Font("Segoe UI", 16, FontStyle.Bold),
                ForeColor = currentTheme != null ? currentTheme.Primary : Color.RoyalBlue,
                Location = new Point(20, 20),
                Size = new Size(410, 35),
                TextAlign = ContentAlignment.MiddleCenter,
                BackColor = Color.Transparent
            };
            
            var instructionLabel = new Label
            {
                Text = "Select one of the words below and start drawing!",
                Font = new Font("Segoe UI", 11, FontStyle.Regular),
                ForeColor = currentTheme.Text,
                Location = new Point(20, 60),
                Size = new Size(410, 25),
                TextAlign = ContentAlignment.MiddleCenter,
                BackColor = Color.Transparent
            };
            
            var word1Button = new Button
            {
                Text = $"✏️ {word1}",
                Font = new Font("Segoe UI", 14, FontStyle.Bold),
                BackColor = currentTheme.Primary,
                ForeColor = Color.White,
                Size = new Size(160, 60),
                Location = new Point(70, 100),
                FlatStyle = FlatStyle.Flat,
                Cursor = Cursors.Hand,
                Tag = word1
            };
            word1Button.FlatAppearance.BorderSize = 0;
            
            var word2Button = new Button
            {
                Text = $"✏️ {word2}",
                Font = new Font("Segoe UI", 14, FontStyle.Bold),
                BackColor = Color.FromArgb(40, 167, 69),
                ForeColor = Color.White,
                Size = new Size(160, 60),
                Location = new Point(250, 100),
                FlatStyle = FlatStyle.Flat,
                Cursor = Cursors.Hand,
                Tag = word2
            };
            word2Button.FlatAppearance.BorderSize = 0;

            // Add hover effects
            word1Button.MouseEnter += (s, e) => word1Button.BackColor = GameEffects.LightenColor(currentTheme.Primary, 0.2f);
            word1Button.MouseLeave += (s, e) => word1Button.BackColor = currentTheme.Primary;
            word2Button.MouseEnter += (s, e) => word2Button.BackColor = GameEffects.LightenColor(Color.FromArgb(40, 167, 69), 0.2f);
            word2Button.MouseLeave += (s, e) => word2Button.BackColor = Color.FromArgb(40, 167, 69);
            
            EventHandler selectWord = (s, e) => {
                var selectedWord = ((Button)s).Tag.ToString();
                currentWord = selectedWord;
                dialog.DialogResult = DialogResult.OK;
                dialog.Close();
                StartDrawingPhase();
            };
            
            word1Button.Click += selectWord;
            word2Button.Click += selectWord;

            // Cancel option
            var cancelButton = new Button
            {
                Text = "❌ Cancel",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                BackColor = Color.FromArgb(220, 53, 69),
                ForeColor = Color.White,
                Size = new Size(100, 35),
                Location = new Point(175, 180),
                FlatStyle = FlatStyle.Flat,
                Cursor = Cursors.Hand
            };
            cancelButton.FlatAppearance.BorderSize = 0;
            cancelButton.Click += (s, e) => {
                dialog.DialogResult = DialogResult.Cancel;
                dialog.Close();
            };
            
            dialog.Controls.AddRange(new Control[] { titleLabel, instructionLabel, word1Button, word2Button, cancelButton });
            
            // Show dialog and handle result
            if (dialog.ShowDialog(this) == DialogResult.Cancel)
            {
                gameView?.AddChat("❌ Word selection cancelled.");
            }
        }

        private void StartDrawingPhase()
        {
            try
            {
                isPlayerDrawing = true;
                gameTimeLeft = currentGameSettings?.TimePerRound ?? 60;
                
                // Update UI
                if (gameView != null)
                {
                    gameView.SetRoundInfo(currentWord, gameTimeLeft, currentRound, maxRounds);
                    gameView.AddChat($"🎨 You are drawing: {currentWord}");
                    gameView.AddChat($"⏰ You have {gameTimeLeft} seconds to draw!");
                    gameView.AddChat("🖌️ Other players will try to guess your drawing.");
                }

                // Update player status
                var currentPlayerInfo = connectedPlayers.FirstOrDefault(p => p.Name == currentUser);
                if (currentPlayerInfo != null)
                {
                    currentPlayerInfo.IsDrawing = true;
                }

                // Update leaderboard (implemented in Form1Extensions)
                UpdateGameViewLeaderboard();

                // Start the timer
                gameTimer?.Start();

                // Play start sound
                GameEffects.PlaySuccessSound();

                toolStripStatusLabel.Text = $"🎨 Drawing: {currentWord} - Time: {gameTimeLeft}s";
            }
            catch (Exception ex)
            {
                gameView?.AddChat($"❌ Error starting drawing phase: {ex.Message}");
                System.Diagnostics.Debug.WriteLine($"StartDrawingPhase Exception: {ex}");
            }
        }
        #endregion

        private void CreateWelcomeInterface()
        {
            this.Controls.Clear();

            welcomePanel = new Panel
            {
                Dock = DockStyle.Fill,
                BackColor = Color.Transparent
            };
            welcomePanel.Paint += WelcomePanel_Paint;

            var titleLabel = new Label
            {
                Text = "🎨 DRAWMASTER PREMIUM 🎨",
                Font = new Font("Segoe UI", 24, FontStyle.Bold),
                ForeColor = currentTheme != null ? currentTheme.Primary : Color.RoyalBlue,
                AutoSize = false,
                Dock = DockStyle.Top,
                Height = 70,
                TextAlign = ContentAlignment.MiddleCenter
            };

            gameStatsPanel = new Panel
            {
                Size = new Size(600, 120),
                BackColor = Color.FromArgb(245, 250, 255),
                BorderStyle = BorderStyle.FixedSingle,
                Location = new Point( (this.ClientSize.Width - 600) / 2, 140 )
            };
            userStatsLabel = new Label
            {
                Dock = DockStyle.Fill,
                Font = new Font("Segoe UI", 12, FontStyle.Regular),
                ForeColor = Color.DimGray,
                TextAlign = ContentAlignment.MiddleCenter
            };
            gameStatsPanel.Controls.Add(userStatsLabel);
            LoadUserStats();

            createRoomButton = new Button
            {
                Text = "🏆 TẠO PHÒNG MỚI",
                Size = new Size(240, 48),
                Location = new Point(200, 320),
                BackColor = Color.FromArgb(59, 130, 246),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                Font = new Font("Segoe UI", 11, FontStyle.Bold)
            };
            createRoomButton.FlatAppearance.BorderSize = 0;
            createRoomButton.Click += CreateRoomButton_Click;

            roomCodeLabel = new Label
            {
                Text = "Hoặc nhập IP phòng:",
                Location = new Point(520, 300),
                Size = new Size(220, 24),
                Font = new Font("Segoe UI", 10, FontStyle.Regular)
            };
            roomCodeTextBox = new TextBox
            {
                Location = new Point(520, 330),
                Size = new Size(220, 28),
                Font = new Font("Segoe UI", 10, FontStyle.Regular)
            };
            joinRoomButton = new Button
            {
                Text = "🚀 THAM GIA",
                Size = new Size(220, 40),
                Location = new Point(520, 368),
                BackColor = Color.FromArgb(30, 64, 175),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                Font = new Font("Segoe UI", 10, FontStyle.Bold)
            };
            joinRoomButton.FlatAppearance.BorderSize = 0;
            joinRoomButton.Click += JoinRoomButton_Click;

            logoutButton = new Button
            {
                Text = "🚪 ĐĂNG XUẤT",
                Size = new Size(150, 40),
                Location = new Point((this.ClientSize.Width - 150) / 2, 450),
                BackColor = Color.FromArgb(220, 53, 69),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                Font = new Font("Segoe UI", 10, FontStyle.Bold)
            };
            logoutButton.FlatAppearance.BorderSize = 0;
            logoutButton.Click += LogoutButton_Click;

            welcomePanel.Controls.AddRange(new Control[]
            {
                titleLabel, gameStatsPanel, createRoomButton, roomCodeLabel, roomCodeTextBox, joinRoomButton, logoutButton
            });

            this.Controls.Add(welcomePanel);

            // Recenter stats panel when resized
            this.Resize += (s, e) =>
            {
                if (gameStatsPanel != null)
                {
                    gameStatsPanel.Location = new Point( (this.ClientSize.Width - gameStatsPanel.Width) / 2, 140 );
                }
            };
        }

        private void CreateLobbyInterface()
        {
            this.Controls.Clear();

            lobbyPanel = new Panel
            {
                Dock = DockStyle.Fill,
                BackColor = Color.Transparent
            };
            lobbyPanel.Paint += LobbyPanel_Paint;

            // Header
            var headerPanel = new Panel { Dock = DockStyle.Top, Height = 60, BackColor = Color.FromArgb(59,130,246) };
            var headerLabel = new Label
            {
                Text = $"LOBBY - PHÒNG: {currentRoomCode}",
                Dock = DockStyle.Fill,
                TextAlign = ContentAlignment.MiddleCenter,
                ForeColor = Color.White,
                Font = new Font("Segoe UI", 16, FontStyle.Bold)
            };
            headerPanel.Controls.Add(headerLabel);
            lobbyPanel.Controls.Add(headerPanel);

            // Content
            var contentPanel = new Panel { Dock = DockStyle.Fill, Padding = new Padding(16) };
            lobbyPanel.Controls.Add(contentPanel);

            // Players group
            var playersGroup = new GroupBox { Text = "👥 Người chơi", Dock = DockStyle.Left, Width = 420, Font = new Font("Segoe UI", 11, FontStyle.Bold) };
            listViewLobbyPlayers = new ListView { Dock = DockStyle.Fill, View = View.Details, FullRowSelect = true, Font = new Font("Segoe UI", 10) };
            listViewLobbyPlayers.Columns.Add("#", 40);
            listViewLobbyPlayers.Columns.Add("Tên", 200);
            listViewLobbyPlayers.Columns.Add("Vai trò", 80);
            listViewLobbyPlayers.Columns.Add("Trạng thái", 90);
            playersGroup.Controls.Add(listViewLobbyPlayers);
            contentPanel.Controls.Add(playersGroup);

            // Spacer
            var spacer = new Panel { Dock = DockStyle.Left, Width = 16 };
            contentPanel.Controls.Add(spacer);

            // Chat group
            var chatGroup = new GroupBox { Text = "💬 Chat sảnh chờ", Dock = DockStyle.Fill, Font = new Font("Segoe UI", 11, FontStyle.Bold) };
            panelLobbyChat = new Panel { Dock = DockStyle.Fill };
            listBoxLobbyChat = new ListBox { Dock = DockStyle.Fill, Font = new Font("Segoe UI", 10) };
            var inputPanel = new Panel { Dock = DockStyle.Bottom, Height = 36 };
            txtLobbyChat = new TextBox { Dock = DockStyle.Fill, Font = new Font("Segoe UI", 10) };
            txtLobbyChat.KeyPress += TxtLobbyChat_KeyPress;
            btnSendLobbyChat = new Button { Text = "Gửi", Dock = DockStyle.Right, Width = 70 };
            btnSendLobbyChat.Click += BtnSendLobbyChat_Click;
            inputPanel.Controls.Add(txtLobbyChat);
            inputPanel.Controls.Add(btnSendLobbyChat);
            panelLobbyChat.Controls.Add(listBoxLobbyChat);
            panelLobbyChat.Controls.Add(inputPanel);
            chatGroup.Controls.Add(panelLobbyChat);
            contentPanel.Controls.Add(chatGroup);

            // Bottom controls
            var controlsPanel = new Panel { Dock = DockStyle.Bottom, Height = 70, Padding = new Padding(16, 8, 16, 8) };
            btnLeaveLobby = new Button { Text = "🚪 Rời Lobby", Size = new Size(150, 44), Location = new Point(16, 13), BackColor = Color.FromArgb(220, 53, 69), ForeColor = Color.White, FlatStyle = FlatStyle.Flat };
            btnLeaveLobby.FlatAppearance.BorderSize = 0;
            btnLeaveLobby.Click += BtnLeaveLobby_Click;
            btnInvitePlayers = new Button { Text = "📧 Mời bạn bè", Size = new Size(150, 44), Location = new Point(180, 13), BackColor = Color.FromArgb(30, 64, 175), ForeColor = Color.White, FlatStyle = FlatStyle.Flat };
            btnInvitePlayers.FlatAppearance.BorderSize = 0;
            btnInvitePlayers.Click += BtnInvitePlayers_Click;
            lblLobbyStatus = new Label { Text = "Đang chờ người chơi...", AutoSize = false, Size = new Size(400, 40), Location = new Point(350, 18), Font = new Font("Segoe UI", 10, FontStyle.Bold), ForeColor = Color.OrangeRed };
            btnStartGameLobby = new Button { Text = "🎮 BẮT ĐẦU GAME", Size = new Size(200, 44), Anchor = AnchorStyles.Top | AnchorStyles.Right };
            btnStartGameLobby.Location = new Point(this.ClientSize.Width - btnStartGameLobby.Width - 32, 13);
            btnStartGameLobby.BackColor = Color.FromArgb(40, 167, 69);
            btnStartGameLobby.ForeColor = Color.White;
            btnStartGameLobby.FlatStyle = FlatStyle.Flat;
            btnStartGameLobby.FlatAppearance.BorderSize = 0;
            btnStartGameLobby.Enabled = false;
            btnStartGameLobby.Click += BtnStartGameLobby_Click;
            controlsPanel.Controls.Add(btnLeaveLobby);
            controlsPanel.Controls.Add(btnInvitePlayers);
            controlsPanel.Controls.Add(lblLobbyStatus);
            controlsPanel.Controls.Add(btnStartGameLobby);
            lobbyPanel.Controls.Add(controlsPanel);

            this.Controls.Add(lobbyPanel);

            // Update after build
            UpdateLobbyInterface();
        }
    }
}