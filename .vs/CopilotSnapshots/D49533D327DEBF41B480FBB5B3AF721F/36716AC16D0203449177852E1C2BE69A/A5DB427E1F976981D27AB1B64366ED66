using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using BaiTapCuoiKy.Properties;

namespace BaiTapCuoiKy
{
    public partial class Form1 : Form
    {
        #region Fields and Properties
        
        private string currentUser;
        private bool isInGame = false;
        private bool isInWaitingRoom = true;
        private Random random = new Random();
        
        // UI Components for the waiting room
        private Panel welcomePanel;
        private Label welcomeLabel;
        private Label userStatsLabel;
        private Button createRoomButton;
        private Button joinRoomButton;
        private Button logoutButton;
        private TextBox roomCodeTextBox;
        private Label roomCodeLabel;
        private Panel gameStatsPanel;

        // Drawing variables
        private bool isDrawing = false;
        private Point lastPoint;
        private Bitmap drawingBitmap;
        private Graphics drawingGraphics;
        private Color currentColor = Color.Black;
        private int brushSize = 3;
        private bool isEraserMode = false;

        // Game state variables
        private string currentWord = "";
        private string[] wordBank = { "CAT", "DOG", "HOUSE", "TREE", "CAR", "BOOK", "APPLE", "STAR", "FISH", "BIRD", "FLOWER", "SUN", "MOON", "BANANA" };
        private int gameTimeLeft = 60;
        private int currentRound = 1;
        private int maxRounds = 5;
        private int playerScore = 0;
        private bool isPlayerDrawing = false;
        private List<PlayerInfo> connectedPlayers = new List<PlayerInfo>();
        private string currentRoomCode = "";
        private Dictionary<string, Image> playerAvatars = new Dictionary<string, Image>();

        #endregion

        #region Player Info Class

        public class PlayerInfo
        {
            public string Name { get; set; }
            public int Score { get; set; }
            public bool IsDrawing { get; set; }
            public bool IsOnline { get; set; }
            public DateTime LastActivity { get; set; }
            public Image Avatar { get; set; }

            public PlayerInfo(string name)
            {
                Name = name;
                Score = 0;
                IsDrawing = false;
                IsOnline = true;
                LastActivity = DateTime.Now;
                Avatar = GenerateAvatar(name);
            }

            private Image GenerateAvatar(string playerName)
            {
                // Create a simple avatar based on player name
                Bitmap avatar = new Bitmap(60, 60);
                using (Graphics g = Graphics.FromImage(avatar))
                {
                    // Background color based on name hash
                    int hash = playerName.GetHashCode();
                    Color bgColor = Color.FromArgb(
                        Math.Abs(hash % 128) + 127,
                        Math.Abs((hash >> 8) % 128) + 127,
                        Math.Abs((hash >> 16) % 128) + 127
                    );
                    
                    g.FillEllipse(new SolidBrush(bgColor), 0, 0, 60, 60);
                    
                    // Draw initials
                    string initials = playerName.Length > 1 ? 
                        playerName.Substring(0, 2).ToUpper() : 
                        playerName.Substring(0, 1).ToUpper();
                    
                    using (Font font = new Font("Segoe UI", 16, FontStyle.Bold))
                    {
                        SizeF textSize = g.MeasureString(initials, font);
                        g.DrawString(initials, font, Brushes.White,
                            (60 - textSize.Width) / 2,
                            (60 - textSize.Height) / 2);
                    }
                }
                return avatar;
            }
        }

        #endregion

        #region Constructor and Initialization

        public Form1() : this("Guest")
        {
        }

        public Form1(string username)
        {
            InitializeComponent();
            currentUser = username;
            InitializeDrawingBitmap();
            
            // Initially show game controls (they will be hidden when showing waiting room)
            SetupInitialGameInterface();
            
            // Then show waiting room
            SetupWaitingRoom();
            LoadUserStats();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            toolStripStatusLabel.Text = $"Chào mừng {currentUser} đến với DrawMaster!";
            // Remove txtPlayerName reference as it's not in the new design
        }

        private void InitializeDrawingBitmap()
        {
            // Initialize with larger canvas size for enhanced interface
            drawingBitmap = new Bitmap(700, 500);
            drawingGraphics = Graphics.FromImage(drawingBitmap);
            drawingGraphics.SmoothingMode = SmoothingMode.AntiAlias;
            drawingGraphics.Clear(Color.White);
        }

        private void EnableDrawingTools(bool enabled)
        {
            panelTools.Enabled = enabled;
            btnClearCanvas.Enabled = enabled;
            panelDrawing.Enabled = enabled;
            
            if (enabled)
            {
                panelDrawing.Cursor = Cursors.Cross;
            }
            else
            {
                panelDrawing.Cursor = Cursors.No;
            }
        }

        private void SetupInitialGameInterface()
        {
            // Set window size for game interface
            this.Size = new Size(1300, 750);
            this.StartPosition = FormStartPosition.CenterScreen;
            
            // Initialize current player info
            if (!string.IsNullOrEmpty(currentUser))
            {
                lblPlayerName.Text = currentUser;
                lblPlayerCurrentScore.Text = $"Score: 0";
            }
            
            // Set initial values
            lblRoomCode.Text = "------";
            lblPlayersCount.Text = "0/8";
            lblCurrentRound.Text = "0/5";
            lblTimeLeft.Text = "00:60";
            progressBarTime.Value = 60;
            lblWordToGuess.Text = "_ _ _ _ _ _";
            
            // Set initial tool selection
            btnPencil.BackColor = Color.FromArgb(45, 125, 245);
            panelSelectedColor.BackColor = currentColor;
        }

        #endregion

        #region UI State Management

        private void SetupWaitingRoom()
        {
            this.WindowState = FormWindowState.Maximized;
            this.Text = $"DrawMaster - Chào mừng {currentUser}";
            
            ShowWaitingRoom();
        }

        private void ShowWaitingRoom()
        {
            isInWaitingRoom = true;
            isInGame = false;

            // Hide all game controls
            HideGameControls();

            // Show waiting room interface
            CreateWelcomeInterface();
        }

        private void ShowGameInterface()
        {
            isInWaitingRoom = false;
            isInGame = true;

            // Hide waiting room
            if (welcomePanel != null)
            {
                this.Controls.Remove(welcomePanel);
                welcomePanel.Dispose();
                welcomePanel = null;
            }

            // Ensure window is properly sized
            this.WindowState = FormWindowState.Normal;
            this.Size = new Size(1300, 750);
            this.StartPosition = FormStartPosition.CenterScreen;

            // Show all game controls
            ShowGameControls();

            // Initialize game state
            InitializeGame();
            
            // Setup enhanced interface
            SetupEnhancedGameInterface();

            // Force a refresh
            this.Refresh();
        }

        private void SetupEnhancedGameInterface()
        {
            // Initialize current player avatar
            if (!string.IsNullOrEmpty(currentUser))
            {
                try
                {
                    pictureBoxPlayerAvatar.Image = GeneratePlayerAvatar(currentUser);
                    lblPlayerName.Text = currentUser;
                    lblPlayerCurrentScore.Text = $"Score: {playerScore}";
                }
                catch (Exception ex)
                {
                    // Fallback if avatar generation fails
                    lblPlayerName.Text = currentUser;
                    lblPlayerCurrentScore.Text = $"Score: {playerScore}";
                }
            }
            
            // Setup leaderboard
            UpdateLeaderboard();
            
            // Setup room info
            lblRoomCode.Text = currentRoomCode;
            UpdatePlayersCount();
            
            // Initialize drawing canvas with larger size
            if (drawingBitmap != null)
                drawingBitmap.Dispose();
            
            drawingBitmap = new Bitmap(700, 500);
            drawingGraphics = Graphics.FromImage(drawingBitmap);
            drawingGraphics.SmoothingMode = SmoothingMode.AntiAlias;
            drawingGraphics.Clear(Color.White);
            
            // Set initial tool selection
            btnPencil.BackColor = Color.FromArgb(173, 216, 230);
            btnEraser.BackColor = Color.FromArgb(255, 193, 203);
            panelSelectedColor.BackColor = currentColor;
            
            // Ensure drawing panel is ready
            panelDrawing.Invalidate();
        }

        private Image GeneratePlayerAvatar(string playerName)
        {
            if (playerAvatars.ContainsKey(playerName))
                return playerAvatars[playerName];

            Bitmap avatar = new Bitmap(60, 60);
            using (Graphics g = Graphics.FromImage(avatar))
            {
                g.SmoothingMode = SmoothingMode.AntiAlias;
                
                // Background color based on name hash
                int hash = playerName.GetHashCode();
                Color bgColor = Color.FromArgb(
                    Math.Abs(hash % 128) + 127,
                    Math.Abs((hash >> 8) % 128) + 127,
                    Math.Abs((hash >> 16) % 128) + 127
                );
                
                g.FillEllipse(new SolidBrush(bgColor), 2, 2, 56, 56);
                g.DrawEllipse(new Pen(Color.White, 2), 2, 2, 56, 56);
                
                // Draw initials
                string initials = playerName.Length > 1 ? 
                    playerName.Substring(0, 2).ToUpper() : 
                    playerName.Substring(0, 1).ToUpper();
                
                using (Font font = new Font("Segoe UI", 14, FontStyle.Bold))
                {
                    SizeF textSize = g.MeasureString(initials, font);
                    g.DrawString(initials, font, Brushes.White,
                        (60 - textSize.Width) / 2,
                        (60 - textSize.Height) / 2);
                }
            }
            
            playerAvatars[playerName] = avatar;
            return avatar;
        }

        private void UpdateLeaderboard()
        {
            listViewLeaderboard.Items.Clear();
            
            // Sort players by score (descending)
            var sortedPlayers = connectedPlayers.OrderByDescending(p => p.Score).ToList();
            
            for (int i = 0; i < sortedPlayers.Count; i++)
            {
                var player = sortedPlayers[i];
                var item = new ListViewItem((i + 1).ToString()); // Rank
                item.SubItems.Add(player.Name); // Player name
                item.SubItems.Add(player.Score.ToString()); // Score
                
                // Status
                string status = player.IsDrawing ? "🎨 Drawing" : 
                               player.IsOnline ? "✅ Online" : "❌ Offline";
                item.SubItems.Add(status);
                
                // Highlight current player
                if (player.Name == currentUser)
                {
                    item.BackColor = Color.FromArgb(240, 248, 255);
                    item.Font = new Font(item.Font, FontStyle.Bold);
                }
                
                // Highlight current drawer
                if (player.IsDrawing)
                {
                    item.ForeColor = Color.FromArgb(40, 167, 69);
                }
                
                listViewLeaderboard.Items.Add(item);
            }
        }

        private void UpdatePlayersCount()
        {
            int onlinePlayers = connectedPlayers.Count(p => p.IsOnline);
            lblPlayersCount.Text = $"{onlinePlayers}/8";
        }

        private void HideGameControls()
        {
            panelTopBar.Visible = false;
            panelDrawing.Visible = false;
            btnClearCanvas.Visible = false;
            panelTools.Visible = false;
            panelChat.Visible = false;
            panelLeaderboard.Visible = false;
            panelCurrentPlayer.Visible = false;
            panelGameInfo.Visible = false;
            panelRoomInfo.Visible = false;
            btnStartGame.Visible = false;
            btnLeaveGame.Visible = false;
            btnBackToWaitingRoom.Visible = false;
            lblGameStatus.Visible = false;
        }

        private void ShowGameControls()
        {
            panelTopBar.Visible = true;
            panelDrawing.Visible = true;
            btnClearCanvas.Visible = true;
            panelTools.Visible = true;
            panelChat.Visible = true;
            panelLeaderboard.Visible = true;
            panelCurrentPlayer.Visible = true;
            panelGameInfo.Visible = true;
            panelRoomInfo.Visible = true;
            btnStartGame.Visible = true;
            btnLeaveGame.Visible = true;
            btnBackToWaitingRoom.Visible = true;
            lblGameStatus.Visible = true;
        }

        #endregion

        #region Waiting Room Interface

        private void CreateWelcomeInterface()
        {
            // Clear existing controls except status bar
            this.Controls.Clear();
            this.Controls.Add(statusStripGame);

            // Main welcome panel
            welcomePanel = new Panel
            {
                Size = new Size(800, 600),
                BackColor = Color.White,
                BorderStyle = BorderStyle.None
            };
            welcomePanel.Location = new Point((this.ClientSize.Width - welcomePanel.Width) / 2, 
                                            (this.ClientSize.Height - welcomePanel.Height) / 2);

            // Add shadow effect
            welcomePanel.Paint += (s, e) => {
                e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;
                // Shadow
                using (var brush = new SolidBrush(Color.FromArgb(50, 0, 0, 0)))
                {
                    e.Graphics.FillRectangle(brush, 5, 5, welcomePanel.Width, welcomePanel.Height);
                }
                // Main panel
                using (var brush = new SolidBrush(Color.White))
                {
                    e.Graphics.FillRectangle(brush, 0, 0, welcomePanel.Width - 5, welcomePanel.Height - 5);
                }
                // Border
                using (var pen = new Pen(Color.FromArgb(45, 125, 245), 2))
                {
                    e.Graphics.DrawRectangle(pen, 1, 1, welcomePanel.Width - 7, welcomePanel.Height - 7);
                }
            };

            // Title
            Label titleLabel = new Label
            {
                Text = "🎨 DRAWMASTER 🎨",
                Font = new Font("Segoe UI", 32, FontStyle.Bold),
                ForeColor = Color.FromArgb(45, 125, 245),
                Location = new Point(50, 50),
                Size = new Size(700, 60),
                TextAlign = ContentAlignment.MiddleCenter
            };

            // Welcome message
            welcomeLabel = new Label
            {
                Text = $"Chào mừng, {currentUser}!",
                Font = new Font("Segoe UI", 18, FontStyle.Bold),
                ForeColor = Color.FromArgb(70, 70, 70),
                Location = new Point(50, 130),
                Size = new Size(700, 40),
                TextAlign = ContentAlignment.MiddleCenter
            };

            // User stats panel
            CreateUserStatsPanel();

            // Game options
            Label optionsLabel = new Label
            {
                Text = "Chọn một tùy chọn để bắt đầu:",
                Font = new Font("Segoe UI", 14),
                ForeColor = Color.FromArgb(70, 70, 70),
                Location = new Point(50, 320),
                Size = new Size(700, 30),
                TextAlign = ContentAlignment.MiddleCenter
            };

            // Create room button
            createRoomButton = new Button
            {
                Text = "🏠 TẠO PHÒNG MỚI",
                Font = new Font("Segoe UI", 16, FontStyle.Bold),
                BackColor = Color.FromArgb(40, 167, 69),
                ForeColor = Color.White,
                Size = new Size(300, 60),
                Location = new Point(100, 370),
                FlatStyle = FlatStyle.Flat,
                Cursor = Cursors.Hand
            };
            createRoomButton.FlatAppearance.BorderSize = 0;
            createRoomButton.Click += CreateRoomButton_Click;

            // Join room section
            roomCodeLabel = new Label
            {
                Text = "Mã phòng:",
                Font = new Font("Segoe UI", 12, FontStyle.Bold),
                ForeColor = Color.FromArgb(70, 70, 70),
                Location = new Point(450, 350),
                Size = new Size(100, 25)
            };

            roomCodeTextBox = new TextBox
            {
                Font = new Font("Segoe UI", 14),
                Location = new Point(450, 375),
                Size = new Size(200, 35),
                BorderStyle = BorderStyle.FixedSingle,
                TextAlign = HorizontalAlignment.Center,
                MaxLength = 6
            };

            joinRoomButton = new Button
            {
                Text = "🚪 THAM GIA PHÒNG",
                Font = new Font("Segoe UI", 16, FontStyle.Bold),
                BackColor = Color.FromArgb(0, 123, 255),
                ForeColor = Color.White,
                Size = new Size(300, 60),
                Location = new Point(400, 420),
                FlatStyle = FlatStyle.Flat,
                Cursor = Cursors.Hand
            };
            joinRoomButton.FlatAppearance.BorderSize = 0;
            joinRoomButton.Click += JoinRoomButton_Click;

            // Logout button
            logoutButton = new Button
            {
                Text = "🚪 ĐĂNG XUẤT",
                Font = new Font("Segoe UI", 12, FontStyle.Bold),
                BackColor = Color.FromArgb(220, 53, 69),
                ForeColor = Color.White,
                Size = new Size(150, 40),
                Location = new Point(325, 520),
                FlatStyle = FlatStyle.Flat,
                Cursor = Cursors.Hand
            };
            logoutButton.FlatAppearance.BorderSize = 0;
            logoutButton.Click += LogoutButton_Click;

            // Add all controls to welcome panel
            welcomePanel.Controls.AddRange(new Control[] {
                titleLabel, welcomeLabel, gameStatsPanel, optionsLabel,
                createRoomButton, roomCodeLabel, roomCodeTextBox, joinRoomButton, logoutButton
            });

            this.Controls.Add(welcomePanel);

            // Handle resize
            this.Resize += (s, e) => {
                if (welcomePanel != null && isInWaitingRoom)
                {
                    welcomePanel.Location = new Point((this.ClientSize.Width - welcomePanel.Width) / 2,
                                                    (this.ClientSize.Height - welcomePanel.Height) / 2);
                }
            };
        }

        private void CreateUserStatsPanel()
        {
            gameStatsPanel = new Panel
            {
                Size = new Size(600, 120),
                Location = new Point(100, 180),
                BackColor = Color.FromArgb(248, 249, 250),
                BorderStyle = BorderStyle.FixedSingle
            };

            Label statsTitle = new Label
            {
                Text = "📊 THỐNG KÊ CỦA BẠN",
                Font = new Font("Segoe UI", 14, FontStyle.Bold),
                ForeColor = Color.FromArgb(45, 125, 245),
                Location = new Point(20, 15),
                Size = new Size(560, 25),
                TextAlign = ContentAlignment.MiddleCenter
            };

            userStatsLabel = new Label
            {
                Font = new Font("Segoe UI", 11),
                ForeColor = Color.FromArgb(70, 70, 70),
                Location = new Point(20, 50),
                Size = new Size(560, 60),
                TextAlign = ContentAlignment.TopCenter
            };

            gameStatsPanel.Controls.AddRange(new Control[] { statsTitle, userStatsLabel });
        }

        private void LoadUserStats()
        {
            var stats = new StringBuilder();
            stats.AppendLine($"🎮 Tổng số game đã chơi: {Settings.Default.TotalGamesPlayed}");
            stats.AppendLine($"🏆 Điểm cao nhất: {Settings.Default.HighestScore}");
            stats.AppendLine($"🎯 Điểm game gần nhất: {Settings.Default.LastGameScore}");
            
            if (Settings.Default.LastPlayedDate != DateTime.MinValue)
            {
                stats.AppendLine($"📅 Lần chơi cuối: {Settings.Default.LastPlayedDate:dd/MM/yyyy HH:mm}");
            }
            else
            {
                stats.AppendLine("📅 Lần đầu tiên chơi - Chào mừng bạn!");
            }

            if (userStatsLabel != null)
                userStatsLabel.Text = stats.ToString();
        }

        #endregion

        #region Waiting Room Events

        private void JoinRoomButton_Click(object sender, EventArgs e)
        {
            string roomCode = roomCodeTextBox.Text.Trim().ToUpper();
            
            if (string.IsNullOrEmpty(roomCode))
            {
                MessageBox.Show("Vui lòng nhập mã phòng!", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            if (roomCode.Length != 6)
            {
                MessageBox.Show("Mã phòng phải có 6 ký tự!", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            var result = MessageBox.Show(
                $"Tham gia phòng: {roomCode}\n\nBạn có muốn vào phòng game không?",
                "Tham gia phòng",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question
            );

            if (result == DialogResult.Yes)
            {
                EnterGameRoom(roomCode, false);
            }
        }

        private void LogoutButton_Click(object sender, EventArgs e)
        {
            var result = MessageBox.Show(
                "Bạn có chắc chắn muốn đăng xuất không?",
                "Xác nhận đăng xuất",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question
            );

            if (result == DialogResult.Yes)
            {
                this.Close();
                
                // Show login form again
                var loginForm = new LoginForm();
                loginForm.LoginSuccessful += (username) =>
                {
                    var gameForm = new Form1(username);
                    gameForm.Show();
                };
                loginForm.Show();
            }
        }

        #endregion

        #region Game Logic

        private void InitializeGame()
        {
            // Reset game state
            currentRound = 1;
            playerScore = 0;
            gameTimeLeft = 60;
            
            // Reset all player drawing status
            foreach (var player in connectedPlayers)
            {
                player.IsDrawing = false;
            }
            
            // Update UI
            lblCurrentRound.Text = $"{currentRound}/{maxRounds}";
            lblPlayerCurrentScore.Text = $"Score: {playerScore}";
            lblTimeLeft.Text = "01:00";
            progressBarTime.Value = 60;
            
            // Clear drawing
            if (drawingGraphics != null)
            {
                drawingGraphics.Clear(Color.White);
                panelDrawing.Invalidate();
            }
            
            // Add welcome message to chat
            AddChatMessage("System", $"🎉 Chào mừng đến với phòng {currentRoomCode}!");
            AddChatMessage("System", "💡 Nhấn 'Start Game' để bắt đầu cuộc phiêu lưu vẽ vời!");
            AddChatMessage("System", "🎯 Mỗi lượt có 60 giây để vẽ hoặc đoán từ!");
        }

        private void StartNewRound()
        {
            // Choose random word
            currentWord = wordBank[random.Next(wordBank.Length)];
            
            // Determine who draws (rotate through players)
            foreach (var player in connectedPlayers)
            {
                player.IsDrawing = false;
            }
            
            int drawerIndex = (currentRound - 1) % connectedPlayers.Count;
            connectedPlayers[drawerIndex].IsDrawing = true;
            isPlayerDrawing = connectedPlayers[drawerIndex].Name == currentUser;
            
            // Update word display
            if (isPlayerDrawing)
            {
                lblWordToGuess.Text = currentWord;
                lblCurrentWord.Text = "🎨 Từ của bạn:";
                AddChatMessage("System", $"🎨 Lượt của bạn! Hãy vẽ từ: {currentWord}");
                EnableDrawingTools(true);
            }
            else
            {
                lblWordToGuess.Text = new string('_', currentWord.Length).Replace("", " ").Trim();
                lblCurrentWord.Text = "🔍 Đoán từ:";
                AddChatMessage("System", $"🎯 Lượt của {connectedPlayers[drawerIndex].Name}! Hãy đoán từ!");
                EnableDrawingTools(false);
            }
            
            // Start timer
            gameTimeLeft = 60;
            progressBarTime.Value = 60;
            timerGame.Start();
            
            // Update UI
            lblGameStatus.Text = isPlayerDrawing ? "🎨 Lượt của bạn - Hãy vẽ!" : "🔍 Đoán từ trong chat!";
            UpdateLeaderboard();
            
            // Start hint system for smarter guessing
            StartHintSystem();
        }

        private void EndRound(bool wordGuessed = false, string guesserName = "")
        {
            timerGame.Stop();
            
            if (wordGuessed && !string.IsNullOrEmpty(guesserName))
            {
                // Calculate score based on time left
                int roundScore = Math.Max(10, gameTimeLeft * 2);
                
                // Update guesser's score
                var guesser = connectedPlayers.FirstOrDefault(p => p.Name == guesserName);
                if (guesser != null)
                {
                    guesser.Score += roundScore;
                    
                    if (guesser.Name == currentUser)
                    {
                        playerScore = guesser.Score;
                        lblPlayerCurrentScore.Text = $"Score: {playerScore}";
                    }
                }
                
                // Award points to drawer too
                var drawer = connectedPlayers.FirstOrDefault(p => p.IsDrawing);
                if (drawer != null)
                {
                    int drawerScore = Math.Max(5, gameTimeLeft);
                    drawer.Score += drawerScore;
                    
                    if (drawer.Name == currentUser)
                    {
                        playerScore = drawer.Score;
                        lblPlayerCurrentScore.Text = $"Score: {playerScore}";
                    }
                }
                
                AddChatMessage("System", $"🎉 {guesserName} đoán đúng! +{roundScore} điểm!");
                if (drawer != null)
                    AddChatMessage("System", $"🎨 {drawer.Name} cũng nhận được điểm thưởng!");
            }
            else if (isPlayerDrawing)
            {
                AddChatMessage("System", $"⏰ Hết thời gian! Từ đúng là: {currentWord}");
            }
            
            currentRound++;
            lblCurrentRound.Text = $"{currentRound}/{maxRounds}";
            
            // Update leaderboard
            UpdateLeaderboard();
            
            if (currentRound <= maxRounds)
            {
                // Start next round after delay
                Task.Delay(3000).ContinueWith(t => {
                    if (this.InvokeRequired)
                    {
                        this.Invoke(new Action(StartNewRound));
                    }
                    else
                    {
                        StartNewRound();
                    }
                });
            }
            else
            {
                EndGame();
            }
        }

        private void EndGame()
        {
            EnableDrawingTools(false);
            
            // Find winner
            var winner = connectedPlayers.OrderByDescending(p => p.Score).FirstOrDefault();
            
            // Update statistics for current player
            var currentPlayerInfo = connectedPlayers.FirstOrDefault(p => p.Name == currentUser);
            if (currentPlayerInfo != null)
            {
                Settings.Default.TotalGamesPlayed++;
                Settings.Default.LastGameScore = currentPlayerInfo.Score;
                Settings.Default.LastPlayedDate = DateTime.Now;
                
                if (currentPlayerInfo.Score > Settings.Default.HighestScore)
                {
                    Settings.Default.HighestScore = currentPlayerInfo.Score;
                }
                
                Settings.Default.Save();
            }
            
            // Show game results
            AddChatMessage("System", "🏁 Game kết thúc!");
            if (winner != null)
            {
                AddChatMessage("System", $"🏆 Người chiến thắng: {winner.Name} với {winner.Score} điểm!");
                if (winner.Name == currentUser)
                {
                    AddChatMessage("System", "🎉 Chúc mừng bạn đã thắng!");
                }
            }
            
            AddChatMessage("System", "🎮 Nhấn 'Start Game' để chơi lại!");
            lblGameStatus.Text = "🏁 Game đã kết thúc! Nhấn 'Start Game' để chơi lại.";
            
            // Re-enable start button
            btnStartGame.Enabled = true;
            
            // Final leaderboard update
            UpdateLeaderboard();
        }

        #endregion

        #region Enhanced Drawing Events

        private Point startPoint;
        private bool isShapeDrawing = false;

        private void panelDrawing_MouseDown(object sender, MouseEventArgs e)
        {
            if (!isPlayerDrawing || !isInGame) return;
            
            isDrawing = true;
            lastPoint = e.Location;
            startPoint = e.Location;
            
            // Save state for undo functionality
            if (currentDrawingMode != DrawingMode.Spray)
            {
                SaveDrawingState();
            }
            
            // Handle different drawing modes
            switch (currentDrawingMode)
            {
                case DrawingMode.Line:
                case DrawingMode.Circle:
                case DrawingMode.Rectangle:
                    isShapeDrawing = true;
                    break;
                    
                case DrawingMode.Spray:
                    DrawSpray(e.Location);
                    break;
            }
        }

        private void panelDrawing_MouseMove(object sender, MouseEventArgs e)
        {
            if (!isDrawing || !isPlayerDrawing || !isInGame) return;
            
            switch (currentDrawingMode)
            {
                case DrawingMode.Pencil:
                case DrawingMode.Brush:
                    DrawFreehand(e.Location);
                    break;
                    
                case DrawingMode.Eraser:
                    EraseAt(e.Location);
                    break;
                    
                case DrawingMode.Spray:
                    DrawSpray(e.Location);
                    break;
                    
                case DrawingMode.Line:
                case DrawingMode.Circle:
                case DrawingMode.Rectangle:
                    // Show preview for shapes
                    panelDrawing.Invalidate();
                    break;
            }
            
            lastPoint = e.Location;
        }

        private void panelDrawing_MouseUp(object sender, MouseEventArgs e)
        {
            if (!isPlayerDrawing || !isInGame) return;
            
            if (isShapeDrawing)
            {
                // Complete shape drawing
                switch (currentDrawingMode)
                {
                    case DrawingMode.Line:
                        DrawLine(startPoint, e.Location);
                        break;
                        
                    case DrawingMode.Circle:
                        int radius = (int)Math.Sqrt(Math.Pow(e.X - startPoint.X, 2) + Math.Pow(e.Y - startPoint.Y, 2));
                        DrawCircle(startPoint, radius);
                        break;
                        
                    case DrawingMode.Rectangle:
                        DrawRectangle(startPoint, e.Location);
                        break;
                }
                
                isShapeDrawing = false;
            }
            
            isDrawing = false;
            
            // Add particle effect for successful drawing
            if (currentDrawingMode != DrawingMode.Eraser)
            {
                AddParticleEffect(e.Location, currentColor);
            }
        }

        private void DrawFreehand(Point currentPoint)
        {
            Color drawColor = isEraserMode ? Color.White : currentColor;
            
            // Rainbow mode
            if (rainbowMode)
            {
                drawColor = ColorFromHSV(rainbowHue, 1.0, 1.0);
            }
            
            using (var pen = new Pen(drawColor, brushSize))
            {
                pen.StartCap = LineCap.Round;
                pen.EndCap = LineCap.Round;
                drawingGraphics.DrawLine(pen, lastPoint, currentPoint);
                
                // Symmetry mode
                if (symmetryMode)
                {
                    Point symmetricPoint = new Point(
                        symmetryAxis.X * 2 - currentPoint.X,
                        currentPoint.Y
                    );
                    Point symmetricLastPoint = new Point(
                        symmetryAxis.X * 2 - lastPoint.X,
                        lastPoint.Y
                    );
                    
                    if (symmetricPoint.X >= 0 && symmetricPoint.X < drawingBitmap.Width)
                    {
                        drawingGraphics.DrawLine(pen, symmetricLastPoint, symmetricPoint);
                    }
                }
            }
            
            panelDrawing.Invalidate();
        }

        private void EraseAt(Point point)
        {
            using (var pen = new Pen(Color.White, brushSize * 2))
            {
                pen.StartCap = LineCap.Round;
                pen.EndCap = LineCap.Round;
                drawingGraphics.DrawLine(pen, lastPoint, point);
            }
            panelDrawing.Invalidate();
        }

        private void panelDrawing_Paint(object sender, PaintEventArgs e)
        {
            if (drawingBitmap != null)
            {
                // Apply zoom and pan
                e.Graphics.InterpolationMode = InterpolationMode.NearestNeighbor;
                e.Graphics.DrawImage(drawingBitmap, panelDrawing.ClientRectangle);
                
                // Draw grid if enabled
                if (showGrid)
                {
                    DrawGrid(e.Graphics);
                }
                
                // Draw shape preview
                if (isShapeDrawing && isDrawing)
                {
                    DrawShapePreview(e.Graphics);
                }
                
                // Draw particles
                DrawParticles(e.Graphics);
                
                // Draw symmetry axis if enabled
                if (symmetryMode)
                {
                    using (var pen = new Pen(Color.LightBlue, 1))
                    {
                        pen.DashStyle = DashStyle.Dash;
                        e.Graphics.DrawLine(pen, symmetryAxis.X, 0, symmetryAxis.X, panelDrawing.Height);
                    }
                }
            }
        }

        private void DrawGrid(Graphics g)
        {
            using (var pen = new Pen(Color.FromArgb(50, Color.Gray), 1))
            {
                int gridSize = 20;
                
                for (int x = 0; x < panelDrawing.Width; x += gridSize)
                {
                    g.DrawLine(pen, x, 0, x, panelDrawing.Height);
                }
                
                for (int y = 0; y < panelDrawing.Height; y += gridSize)
                {
                    g.DrawLine(pen, 0, y, panelDrawing.Width, y);
                }
            }
        }

        private void DrawShapePreview(Graphics g)
        {
            using (var pen = new Pen(Color.FromArgb(128, currentColor), brushSize))
            {
                pen.DashStyle = DashStyle.Dash;
                
                switch (currentDrawingMode)
                {
                    case DrawingMode.Line:
                        g.DrawLine(pen, startPoint, lastPoint);
                        break;
                        
                    case DrawingMode.Circle:
                        int radius = (int)Math.Sqrt(Math.Pow(lastPoint.X - startPoint.X, 2) + Math.Pow(lastPoint.Y - startPoint.Y, 2));
                        Rectangle circleRect = new Rectangle(startPoint.X - radius, startPoint.Y - radius, radius * 2, radius * 2);
                        g.DrawEllipse(pen, circleRect);
                        break;
                        
                    case DrawingMode.Rectangle:
                        Rectangle rect = new Rectangle(
                            Math.Min(startPoint.X, lastPoint.X),
                            Math.Min(startPoint.Y, lastPoint.Y),
                            Math.Abs(lastPoint.X - startPoint.X),
                            Math.Abs(lastPoint.Y - startPoint.Y)
                        );
                        g.DrawRectangle(pen, rect);
                        break;
                }
            }
        }

        private void DrawParticles(Graphics g)
        {
            foreach (var particle in particles)
            {
                using (var brush = new SolidBrush(Color.FromArgb((int)(particle.Life * 255), particle.Color)))
                {
                    g.FillEllipse(brush, 
                        particle.Position.X - particle.Size / 2, 
                        particle.Position.Y - particle.Size / 2, 
                        particle.Size, 
                        particle.Size);
                }
            }
        }

        #endregion

        #region Enhanced Tool Events

        private void btnPencil_Click(object sender, EventArgs e)
        {
            currentDrawingMode = DrawingMode.Pencil;
            isEraserMode = false;
            UpdateToolSelection();
            AddChatMessage("System", "✏️ Chế độ bút chì được kích hoạt");
        }

        private void btnBrush_Click(object sender, EventArgs e)
        {
            currentDrawingMode = DrawingMode.Brush;
            isEraserMode = false;
            UpdateToolSelection();
            AddChatMessage("System", "🖌️ Chế độ cọ vẽ được kích hoạt");
        }

        private void btnEraser_Click(object sender, EventArgs e)
        {
            currentDrawingMode = DrawingMode.Eraser;
            isEraserMode = true;
            UpdateToolSelection();
            AddChatMessage("System", "🧽 Chế độ tẩy được kích hoạt");
        }

        private void btnLine_Click(object sender, EventArgs e)
        {
            currentDrawingMode = DrawingMode.Line;
            isEraserMode = false;
            UpdateToolSelection();
            AddChatMessage("System", "📏 Chế độ vẽ đường thẳng được kích hoạt");
        }

        private void btnCircle_Click(object sender, EventArgs e)
        {
            currentDrawingMode = DrawingMode.Circle;
            isEraserMode = false;
            UpdateToolSelection();
            AddChatMessage("System", "⭕ Chế độ vẽ hình tròn được kích hoạt");
        }

        private void btnRectangle_Click(object sender, EventArgs e)
        {
            currentDrawingMode = DrawingMode.Rectangle;
            isEraserMode = false;
            UpdateToolSelection();
            AddChatMessage("System", "⬜ Chế độ vẽ hình chữ nhật được kích hoạt");
        }

        private void btnSpray_Click(object sender, EventArgs e)
        {
            currentDrawingMode = DrawingMode.Spray;
            isEraserMode = false;
            UpdateToolSelection();
            AddChatMessage("System", "💨 Chế độ phun sơn được kích hoạt");
        }

        private void btnRainbow_Click(object sender, EventArgs e)
        {
            rainbowMode = !rainbowMode;
            if (rainbowMode)
            {
                rainbowTimer.Start();
                AddChatMessage("System", "🌈 Chế độ cầu vồng được kích hoạt!");
            }
            else
            {
                rainbowTimer.Stop();
                AddChatMessage("System", "🌈 Chế độ cầu vồng đã tắt");
            }
            UpdateToolSelection();
        }

        private void btnSymmetry_Click(object sender, EventArgs e)
        {
            symmetryMode = !symmetryMode;
            AddChatMessage("System", symmetryMode ? "🪞 Chế độ đối xứng được kích hoạt!" : "🪞 Chế độ đối xứng đã tắt");
            panelDrawing.Invalidate();
        }

        private void btnGrid_Click(object sender, EventArgs e)
        {
            showGrid = !showGrid;
            AddChatMessage("System", showGrid ? "📐 Lưới hỗ trợ được hiển thị" : "📐 Lưới hỗ trợ đã ẩn");
            panelDrawing.Invalidate();
        }

        private void btnUndo_Click(object sender, EventArgs e)
        {
            PerformUndo();
        }

        private void btnRedo_Click(object sender, EventArgs e)
        {
            PerformRedo();
        }

        private void UpdateToolSelection()
        {
            // Reset all tool colors
            btnPencil.BackColor = Color.FromArgb(173, 216, 230);
            btnEraser.BackColor = Color.FromArgb(255, 193, 203);
            
            // Highlight selected tool
            switch (currentDrawingMode)
            {
                case DrawingMode.Pencil:
                    btnPencil.BackColor = Color.FromArgb(45, 125, 245);
                    break;
                case DrawingMode.Eraser:
                    btnEraser.BackColor = Color.FromArgb(220, 53, 69);
                    break;
            }
        }

        #endregion

        #region Enhanced Chat Processing

        private void SendChatMessage()
        {
            string message = txtChatInput.Text.Trim();
            if (string.IsNullOrEmpty(message)) return;
            
            // Check for special commands
            if (message.StartsWith("/"))
            {
                ProcessChatCommand(message);
                txtChatInput.Clear();
                return;
            }
            
            // Check if guess is correct (enhanced with feedback)
            if (!isPlayerDrawing && isInGame && timerGame.Enabled)
            {
                ProcessGuessWithFeedback(message);
            }
            else
            {
                AddChatMessage(currentUser, message);
            }
            
            txtChatInput.Clear();
        }

        private void ProcessChatCommand(string command)
        {
            switch (command.ToLower())
            {
                case "/hint":
                    if (!isPlayerDrawing && hintsRevealed < 3)
                    {
                        RevealNextHint();
                    }
                    else
                    {
                        AddChatMessage("System", "❌ Không thể sử dụng gợi ý lúc này");
                    }
                    break;
                    
                case "/grid":
                    btnGrid_Click(null, null);
                    break;
                    
                case "/rainbow":
                    btnRainbow_Click(null, null);
                    break;
                    
                case "/symmetry":
                    btnSymmetry_Click(null, null);
                    break;
                    
                case "/help":
                    ShowChatHelp();
                    break;
                    
                default:
                    AddChatMessage("System", "❓ Lệnh không hợp lệ. Gõ /help để xem danh sách lệnh");
                    break;
            }
        }

        private void ShowChatHelp()
        {
            AddChatMessage("System", "💡 DANH SÁCH LỆNH:");
            AddChatMessage("System", "/hint - Xem gợi ý");
            AddChatMessage("System", "/grid - Bật/tắt lưới");
            AddChatMessage("System", "/rainbow - Bật/tắt chế độ cầu vồng");
            AddChatMessage("System", "/symmetry - Bật/tắt chế độ đối xứng");
            AddChatMessage("System", "/help - Hiển thị trợ giúp này");
        }

        #endregion
    }
}