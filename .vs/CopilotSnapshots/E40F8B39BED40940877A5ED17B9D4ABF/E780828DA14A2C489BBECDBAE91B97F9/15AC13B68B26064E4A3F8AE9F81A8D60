using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Windows.Forms;

namespace BaiTapCuoiKy
{
    // Partial class chứa các method còn thiếu cho Form1
    public partial class Form1
    {
        // Bổ sung trạng thái cho gợi ý giữa hiệp
        private int roundDurationTotal; // tổng thời gian của vòng hiện tại
        private bool halfHintShown;     // đã hiển thị gợi ý giữa thời gian chưa

        #region TransitionToGame and Game Logic

        private void TransitionToGame()
        {
            try
            {
                isInWaitingRoom = false;
                isInLobby = false;
                isInGame = true;

                if (lobbyAnimationTimer != null)
                {
                    lobbyAnimationTimer.Stop();
                    lobbyAnimationTimer.Dispose();
                    lobbyAnimationTimer = null;
                }

                // Remove lobby panel if exists
                if (lobbyPanel != null)
                {
                    this.Controls.Remove(lobbyPanel);
                    lobbyPanel.Dispose();
                    lobbyPanel = null;
                }

                // Hide all existing game controls first
                HideAllGameControls();

                // Setup form for game
                this.WindowState = FormWindowState.Normal;
                this.Size = new Size(1400, 800);
                this.StartPosition = FormStartPosition.CenterScreen;
                this.Text = $"DrawMaster - Phòng {currentRoomCode}";
                this.BackColor = Color.FromArgb(248, 249, 250);

                // Create and show embedded game view
                if (gameView == null)
                {
                    gameView = new GameViewControl
                    {
                        Dock = DockStyle.Fill
                    };
                }

                // Configure initial info
                gameView.RoomCode = currentRoomCode;
                gameView.PlayerName = currentUser;
                gameView.PlayersOnline = connectedPlayers.Count;

                // Connect event handlers from GameViewControl with correct signatures
                gameView.StartGameRequested += GameView_StartGameRequested;
                gameView.LeaveRequested += GameView_LeaveRequested;
                gameView.BackLobbyRequested += GameView_BackLobbyRequested;
                gameView.MessageSubmitted += GameView_MessageSubmitted;
                
                // Note: Fix the message submitted event - it should pass the message as parameter
                // We'll handle this by creating a wrapper event or checking the GameViewControl implementation

                // Add to form
                this.Controls.Add(gameView);
                gameView.BringToFront();

                // Setup initial game state
                SetupInitialGameState();

                // Initialize game timer
                SetupGameTimer();

                // Welcome messages (tiếng Việt)
                gameView.AddChat($"Chào mừng đến phòng {currentRoomCode}!");
                gameView.AddChat("Nhấn 'Bắt đầu' để vào lượt vẽ và chơi!");
                gameView.SetRoundInfo("- - - - -", gameTimeLeft, currentRound, maxRounds);

                // Update leaderboard with current players
                UpdateGameViewLeaderboard();

                toolStripStatusLabel.Text = $"DrawMaster - Phòng {currentRoomCode} - Sẵn sàng chơi!";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Lỗi khi chuyển sang giao diện game: {ex.Message}", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void SetupInitialGameState()
        {
            currentRound = 1;
            playerScore = 0;
            gameTimeLeft = currentGameSettings?.TimePerRound ?? 60;
            roundDurationTotal = gameTimeLeft;
            halfHintShown = false;
            isPlayerDrawing = false;
            currentWord = "";
        }

        private void SetupGameTimer()
        {
            if (gameTimer != null)
            {
                gameTimer.Stop();
                gameTimer.Dispose();
            }

            gameTimer = new Timer { Interval = 1000 };
            gameTimer.Tick += GameTimer_Tick;
        }

        private void GameTimer_Tick(object sender, EventArgs e)
        {
            if (gameTimeLeft > 0)
            {
                gameTimeLeft--;
                gameView?.UpdateTime(gameTimeLeft);

                // Gợi ý khi còn nửa thời gian cho người đoán
                if (!halfHintShown && gameTimeLeft == roundDurationTotal / 2)
                {
                    ShowHalfTimeHint();
                }

                // Cảnh báo khi sắp hết giờ
                if (gameTimeLeft <= 10 && gameTimeLeft > 0)
                {
                    gameView?.AddChat($"Cảnh báo: Còn {gameTimeLeft} giây!");
                    if (gameTimeLeft <= 5)
                        GameEffects.PlayWarningSound();
                }

                // Hết giờ
                if (gameTimeLeft <= 0)
                {
                    gameTimer.Stop();
                    HandleTimeUp();
                }
            }
        }

        private void ShowHalfTimeHint()
        {
            halfHintShown = true;

            if (!string.IsNullOrEmpty(currentWord))
            {
                // Tạo gợi ý: chữ cái đầu, số chữ cái và một mẫu ẩn/hiện
                var word = currentWord.Trim();
                char first = word[0];
                int len = word.Length;
                string pattern = BuildMaskedPattern(word);

                gameView?.AddChat($"Gợi ý: Bắt đầu bằng '{char.ToUpper(first)}', gồm {len} chữ cái. Mẫu: {pattern}");
            }
        }

        private string BuildMaskedPattern(string word)
        {
            if (string.IsNullOrEmpty(word)) return string.Empty;
            if (word.Length <= 2) return word.Substring(0, 1) + new string('_', Math.Max(0, word.Length - 1));

            var chars = word.ToCharArray();
            for (int i = 1; i < chars.Length - 1; i++)
            {
                if (char.IsWhiteSpace(chars[i])) continue;
                // ngẫu nhiên lộ 1-2 chữ cái trong từ
                bool reveal = (i % 3 == 0);
                if (!reveal) chars[i] = '_';
            }
            return new string(chars);
        }

        private void HandleTimeUp()
        {
            GameEffects.PlayErrorSound();
            
            if (isPlayerDrawing)
            {
                gameView?.AddChat("Hết giờ! Lượt vẽ của bạn đã kết thúc.");
                EndDrawingTurn();
            }
            else
            {
                gameView?.AddChat("Hết giờ! Không ai đoán được từ.");
                NextRound();
            }
        }

        private void EndDrawingTurn()
        {
            isPlayerDrawing = false;
            
            // Award points based on guesses (simulate)
            int pointsEarned = random.Next(10, 50);
            playerScore += pointsEarned;
            
            gameView?.AddChat($"Bạn nhận được {pointsEarned} điểm cho lượt vẽ!");
            
            // Update player score in connected players
            var currentPlayerInfo = connectedPlayers.FirstOrDefault(p => p.Name == currentUser);
            if (currentPlayerInfo != null)
            {
                currentPlayerInfo.Score = playerScore;
            }

            UpdateGameViewLeaderboard();
            
            // Next player's turn or next round
            NextRound();
        }

        private void NextRound()
        {
            currentRound++;
            halfHintShown = false;
            
            if (currentRound > maxRounds)
            {
                EndGame();
            }
            else
            {
                gameTimeLeft = currentGameSettings?.TimePerRound ?? 60;
                roundDurationTotal = gameTimeLeft;
                gameView?.SetRoundInfo("- - - - -", gameTimeLeft, currentRound, maxRounds);
                gameView?.AddChat($"Vòng {currentRound} bắt đầu! Nhấn 'Bắt đầu' khi sẵn sàng.");
                
                // Simulate other players getting turns
                SimulateOtherPlayerTurn();
            }
        }

        private void SimulateOtherPlayerTurn()
        {
            if (connectedPlayers.Count > 1)
            {
                var otherPlayers = connectedPlayers.Where(p => p.Name != currentUser).ToList();
                if (otherPlayers.Any())
                {
                    var nextPlayer = otherPlayers[random.Next(otherPlayers.Count)];
                    nextPlayer.IsDrawing = true;
                    
                    gameView?.AddChat($"🎨 {nextPlayer.Name} đang vẽ...");
                    
                    // Simulate their drawing time and other players guessing
                    var simulationTimer = new Timer { Interval = 3000 }; // 3 seconds simulation
                    int guessCount = 0;
                    
                    simulationTimer.Tick += (s, e) =>
                    {
                        guessCount++;
                        
                        if (guessCount < 3) // Simulate some guesses
                        {
                            var guessingPlayers = otherPlayers.Where(p => p != nextPlayer).ToList();
                            if (guessingPlayers.Any())
                            {
                                var guesser = guessingPlayers[random.Next(guessingPlayers.Count)];
                                var randomWords = new[] { "máy tính", "cây", "nhà", "mặt trời", "điện thoại" };
                                var guess = randomWords[random.Next(randomWords.Length)];
                                
                                // Simulate wrong guesses mostly, but occasionally right ones
                                bool isCorrect = random.Next(100) < 30; // 30% chance of correct guess
                                if (isCorrect)
                                {
                                    guesser.Score += random.Next(15, 35);
                                    gameView?.AddChat($"✅ {guesser.Name} đoán đúng: {guess}!");
                                    if (gameView != null)
                                    {
                                        gameView.ProcessGuess(guesser.Name, guess);
                                    }
                                }
                                else
                                {
                                    gameView?.AddChat($"❌ {guesser.Name}: {guess}");
                                }
                                
                                UpdateGameViewLeaderboard();
                            }
                        }
                        else
                        {
                            // End simulation
                            simulationTimer.Stop();
                            simulationTimer.Dispose();
                            
                            nextPlayer.IsDrawing = false;
                            nextPlayer.Score += random.Next(20, 80);
                            
                            gameView?.AddChat($"⏰ {nextPlayer.Name} đã hoàn thành lượt vẽ!");
                            UpdateGameViewLeaderboard();
                        }
                    };
                    simulationTimer.Start();
                }
            }
        }

        private void EndGame()
        {
            gameTimer?.Stop();
            
            var winner = connectedPlayers.OrderByDescending(p => p.Score).First();
            var isWinner = winner.Name == currentUser;
            
            var endMessage = isWinner 
                ? $"Chúc mừng! Bạn thắng với {winner.Score} điểm!" 
                : $"Kết thúc game! Người thắng: {winner.Name} với {winner.Score} điểm. Điểm của bạn: {playerScore}.";
            
            gameView?.AddChat("Trò chơi đã kết thúc!");
            gameView?.AddChat(endMessage);
            
            if (isWinner)
            {
                GameEffects.PlaySuccessSound();
                winStreak++;
            }
            else
            {
                GameEffects.PlayErrorSound();
                winStreak = 0;
            }

            // Show results dialog
            var result = MessageBox.Show(
                $"{endMessage}\n\nBạn có muốn chơi lại không?",
                "Kết thúc game",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Information
            );

            if (result == DialogResult.Yes)
            {
                RestartGame();
            }
            else
            {
                ShowLobbyInterface();
            }
        }

        private void RestartGame()
        {
            // Reset game state
            currentRound = 1;
            playerScore = 0;
            gameTimeLeft = currentGameSettings?.TimePerRound ?? 60;
            roundDurationTotal = gameTimeLeft;
            halfHintShown = false;
            isPlayerDrawing = false;
            currentWord = "";

            // Reset all players scores
            foreach (var player in connectedPlayers)
            {
                player.Score = 0;
                player.IsDrawing = false;
            }

            // Reset GameView for new game
            if (gameView != null)
            {
                gameView.ResetForNewRound();
                gameView.SetRoundInfo("- - - - -", gameTimeLeft, currentRound, maxRounds);
                gameView.AddChat("🔄 Game đã khởi động lại! Nhấn 'Bắt đầu' để chơi.");
            }
            UpdateGameViewLeaderboard();
        }

        private void UpdateGameViewLeaderboard()
        {
            if (gameView != null)
            {
                var leaderboardEntries = connectedPlayers
                    .OrderByDescending(p => p.Score)
                    .Select((p, index) => (
                        rank: index + 1,
                        player: p.Name,
                        score: p.Score,
                        status: p.IsDrawing ? "Đang vẽ" : (p.Name == currentUser ? "Bạn" : "Chờ")
                    ))
                    .ToArray();

                gameView.SetLeaderboard(leaderboardEntries);
            }
        }

        #endregion

        #region GameViewControl Event Handlers

        private void GameView_StartGameRequested(object sender, EventArgs e)
        {
            try
            {
                if (isPlayerDrawing)
                {
                    gameView?.AddChat("Bạn đang trong lượt vẽ!");
                    return;
                }

                if (gameTimer != null && gameTimer.Enabled)
                {
                    gameView?.AddChat("Game đang diễn ra!");
                    return;
                }

                StartWordSelection();
            }
            catch (Exception ex)
            {
                gameView?.AddChat($"Lỗi khi bắt đầu game: {ex.Message}");
            }
        }

        private void GameView_LeaveRequested(object sender, EventArgs e)
        {
            var result = MessageBox.Show(
                "Bạn có chắc muốn rời khỏi game?",
                "Rời game",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question
            );

            if (result == DialogResult.Yes)
            {
                ShowWaitingRoom();
            }
        }

        private void GameView_BackLobbyRequested(object sender, EventArgs e)
        {
            var result = MessageBox.Show(
                "Quay lại sảnh chờ? Lượt chơi hiện tại sẽ kết thúc.",
                "Về Lobby",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question
            );

            if (result == DialogResult.Yes)
            {
                ShowLobbyInterface();
            }
        }

        // Fix: Update event handler signature to match Action<string>
        private void GameView_MessageSubmitted(string message)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(message)) return;

                var timestamp = DateTime.Now.ToString("HH:mm");
                var chatLine = $"[{timestamp}] {currentUser}: {message}";
                
                // Enhanced chat processing - check message type
                string processedMessage = ProcessChatMessage(message);
                
                // Check if it's a guess during active drawing phase
                if (!isPlayerDrawing && !string.IsNullOrEmpty(currentWord) && gameTimer != null && gameTimer.Enabled)
                {
                    if (message.Trim().ToUpper() == currentWord.ToUpper())
                    {
                        // Correct guess!
                        int guessPoints = CalculateGuessPoints(gameTimeLeft);
                        playerScore += guessPoints;
                        
                        var currentPlayerInfo = connectedPlayers.FirstOrDefault(p => p.Name == currentUser);
                        if (currentPlayerInfo != null)
                        {
                            currentPlayerInfo.Score = playerScore;
                        }

                        // Show success message with celebration
                        gameView?.AddChat($"✅ {currentUser} đoán chính xác: '{message}'!");
                        gameView?.AddChat($"🎉 +{guessPoints} điểm! (Thời gian còn lại: {gameTimeLeft}s)");
                        
                        GameEffects.PlaySuccessSound();
                        UpdateGameViewLeaderboard();
                        
                        // Check if round should end early due to half players guessing correctly
                        bool shouldEndEarly = false;
                        if (gameView != null)
                        {
                            shouldEndEarly = gameView.ProcessGuess(currentUser, message);
                        }
                        
                        if (shouldEndEarly)
                        {
                            // Stop timer and end round early
                            gameTimer?.Stop();
                            gameView?.AddChat("🚀 Nhiều người đã đoán đúng! Chuyển vòng mới.");
                            
                            // Award bonus points for fast completion
                            int bonusPoints = 20;
                            playerScore += bonusPoints;
                            if (currentPlayerInfo != null)
                            {
                                currentPlayerInfo.Score = playerScore;
                            }
                            gameView?.AddChat($"🎁 Phần thưởng nhóm: +{bonusPoints} điểm!");
                            
                            UpdateGameViewLeaderboard();
                            NextRound();
                        }
                        else
                        {
                            // Continue with normal flow - end current turn
                            gameTimer?.Stop();
                            EndDrawingTurn();
                        }
                        return;
                    }
                    else
                    {
                        // Wrong guess - process it and show to all players
                        if (gameView != null)
                        {
                            gameView.ProcessGuess(currentUser, message);
                        }
                        
                        // Enhanced wrong guess feedback
                        string similarity = GetWordSimilarity(message, currentWord);
                        gameView?.AddChat($"❌ {currentUser}: {message} {similarity}");
                        
                        // Play subtle wrong sound
                        GameEffects.PlayWarningSound();
                    }
                }
                else
                {
                    // Regular chat message or drawing phase chat
                    if (isPlayerDrawing)
                    {
                        // Drawing player can only send limited messages
                        if (IsAllowedDrawingMessage(message))
                        {
                            gameView?.AddChat($"🎨 {currentUser} (đang vẽ): {processedMessage}");
                        }
                        else
                        {
                            gameView?.AddChat($"⚠️ Người vẽ không được tiết lộ từ hoặc gợi ý!");
                            return;
                        }
                    }
                    else
                    {
                        // Normal player chat with enhanced features
                        gameView?.AddChat($"💬 {chatLine}");
                    }
                }
                
                // Simulate other players reactions to chat
                SimulatePlayerReactions(message);
                
            }
            catch (Exception ex)
            {
                gameView?.AddChat($"❌ Lỗi gửi tin nhắn: {ex.Message}");
            }
        }

        #region Enhanced Chat Features

        private string ProcessChatMessage(string message)
        {
            // Filter out inappropriate content or hints when drawing
            message = message.Trim();
            
            // Add emoji reactions for common phrases
            var reactions = new Dictionary<string, string>
            {
                {"😂", " 😂"},
                {"haha", " 😄"},
                {"wow", " 😮"},
                {"nice", " 👍"},
                {"good", " 👏"},
                {"easy", " 😎"},
                {"hard", " 😵"},
                {"help", " 🆘"},
                {"hint", " 💡"},
                {"thanks", " 🙏"},
                {"sorry", " 😅"}
            };
            
            foreach (var reaction in reactions)
            {
                if (message.ToLower().Contains(reaction.Key))
                {
                    message += reaction.Value;
                    break;
                }
            }
            
            return message;
        }

        private bool IsAllowedDrawingMessage(string message)
        {
            // Check if drawing player's message contains hints about the word
            if (string.IsNullOrEmpty(currentWord)) return true;
            
            string lowerMessage = message.ToLower();
            string lowerWord = currentWord.ToLower();
            
            // Block direct word or parts of word
            if (lowerMessage.Contains(lowerWord)) return false;
            
            // Block common hint words
            var forbiddenWords = new[] {
                "letter", "letters", "chữ", "từ", "word", "rhyme", "sounds like", 
                "starts with", "ends with", "bắt đầu", "kết thúc", "âm thanh", 
                "giống như", "tương tự", "hint", "gợi ý", "clue", "manh mối"
            };
            
            foreach (var forbidden in forbiddenWords)
            {
                if (lowerMessage.Contains(forbidden.ToLower()))
                {
                    return false;
                }
            }
            
            return true;
        }

        private string GetWordSimilarity(string guess, string target)
        {
            if (string.IsNullOrEmpty(guess) || string.IsNullOrEmpty(target))
                return "";
            
            guess = guess.ToUpper().Trim();
            target = target.ToUpper().Trim();
            
            // Check for length similarity
            if (Math.Abs(guess.Length - target.Length) <= 1)
            {
                return "📏 (độ dài gần đúng)";
            }
            
            // Check for starting letter
            if (guess.Length > 0 && target.Length > 0 && guess[0] == target[0])
            {
                return "🔤 (chữ đầu đúng)";
            }
            
            // Check for contains similar letters
            int commonLetters = guess.Intersect(target).Count();
            if (commonLetters >= target.Length / 2)
            {
                return "📝 (có chữ cái tương tự)";
            }
            
            return "";
        }

        private int CalculateGuessPoints(int timeLeft)
        {
            // More points for faster guesses
            int basePoints = 10;
            int timeBonus = Math.Max(0, timeLeft * 2);
            int speedBonus = 0;
            
            if (timeLeft > roundDurationTotal * 0.8f) // Very fast guess
            {
                speedBonus = 30;
            }
            else if (timeLeft > roundDurationTotal * 0.6f) // Fast guess
            {
                speedBonus = 20;
            }
            else if (timeLeft > roundDurationTotal * 0.3f) // Normal guess
            {
                speedBonus = 10;
            }
            
            return basePoints + timeBonus + speedBonus;
        }

        private void SimulatePlayerReactions(string message)
        {
            // Simulate other players reacting to chat messages
            if (connectedPlayers.Count <= 1) return;
            
            var otherPlayers = connectedPlayers.Where(p => p.Name != currentUser && !p.IsDrawing).ToList();
            if (!otherPlayers.Any()) return;
            
            // Random chance for reactions
            if (random.Next(100) < 30) // 30% chance
            {
                var reactingPlayer = otherPlayers[random.Next(otherPlayers.Count)];
                
                // Different types of reactions
                var reactions = new[]
                {
                    "👍", "😄", "🤔", "😮", "👏", "😅", "🙄", "💯", "🔥", "❤️"
                };
                
                var phrases = new[]
                {
                    "đúng rồi!", "hay quá!", "khó quá!", "dễ mà!", "thông minh!", 
                    "tôi cũng nghĩ vậy", "không phải đâu", "gần rồi!", "xa quá!",
                    "😂😂😂", "nice try!", "hmm...", "maybe?", "good guess!"
                };
                
                string reaction = "";
                if (random.Next(100) < 50) // 50% emoji, 50% phrase
                {
                    reaction = reactions[random.Next(reactions.Length)];
                }
                else
                {
                    reaction = phrases[random.Next(phrases.Length)];
                }
                
                // Delay the reaction slightly for realism
                var reactionTimer = new Timer { Interval = random.Next(1000, 3000) }; // 1-3 seconds
                reactionTimer.Tick += (s, e) =>
                {
                    reactionTimer.Stop();
                    reactionTimer.Dispose();
                    gameView?.AddChat($"💭 {reactingPlayer.Name}: {reaction}");
                };
                reactionTimer.Start();
            }
        }

        private BroadcastToAllPlayers(string message, string messageType = "chat")
        {
            // In a real multiplayer game, this would send to all connected players
            // For simulation, we'll show it to current player and simulate others
            
            foreach (var player in connectedPlayers)
            {
                if (player.Name != currentUser)
                {
                    // Simulate receiving message for other players
                    SimulatePlayerReceiveMessage(player.Name, message, messageType);
                }
            }
        }

        private void SimulatePlayerReceiveMessage(string playerName, string message, string messageType)
        {
            // Simulate other players receiving and potentially responding to messages
            if (random.Next(100) < 20) // 20% chance to respond
            {
                var responses = new[]
                {
                    "tôi cũng nghĩ vậy", "không chắc", "có thể", "đúng rồi", 
                    "sai rồi", "gần đúng", "xa quá", "hay!", "khó quá!"
                };
                
                var response = responses[random.Next(responses.Length)];
                
                // Delay response
                var responseTimer = new Timer { Interval = random.Next(2000, 5000) };
                responseTimer.Tick += (s, e) =>
                {
                    responseTimer.Stop();
                    responseTimer.Dispose();
                    gameView?.AddChat($"💬 [{DateTime.Now:HH:mm}] {playerName}: {response}");
                };
                responseTimer.Start();
            }
        }

        #endregion

        #region Enhanced Multiplayer Chat System

        private void BroadcastToAllPlayers(string message, string messageType = "chat")
        {
            // In a real multiplayer game, this would send to all connected players
            // For simulation, we'll show it to current player and simulate others
            
            foreach (var player in connectedPlayers)
            {
                if (player.Name != currentUser)
                {
                    // Simulate receiving message for other players
                    SimulatePlayerReceiveMessage(player.Name, message, messageType);
                }
            }
        }

        private void SimulatePlayerReceiveMessage(string playerName, string message, string messageType)
        {
            // Simulate other players receiving and potentially responding to messages
            if (random.Next(100) < 20) // 20% chance to respond
            {
                var responses = new[]
                {
                    "tôi cũng nghĩ vậy", "không chắc", "có thể", "đúng rồi", 
                    "sai rồi", "gần đúng", "xa quá", "hay!", "khó quá!"
                };
                
                var response = responses[random.Next(responses.Length)];
                
                // Delay response
                var responseTimer = new Timer { Interval = random.Next(2000, 5000) };
                responseTimer.Tick += (s, e) =>
                {
                    responseTimer.Stop();
                    responseTimer.Dispose();
                    gameView?.AddChat($"💬 [{DateTime.Now:HH:mm}] {playerName}: {response}");
                };
                responseTimer.Start();
            }
        }

        #endregion

        #region Enhanced Lobby Chat

        private void UpdateLobbyInterface()
        {
            try
            {
                // Update players list
                if (listViewLobbyPlayers != null)
                {
                    listViewLobbyPlayers.Items.Clear();
                    
                    for (int i = 0; i < connectedPlayers.Count; i++)
                    {
                        var player = connectedPlayers[i];
                        var item = new ListViewItem($"{i + 1}");
                        item.SubItems.Add(player.Name);
                        item.SubItems.Add(player.Name == currentUser ? "Chủ phòng" : "Người chơi");
                        
                        if (player.Name == currentUser)
                        {
                            item.BackColor = Color.FromArgb(220, 252, 231);
                            item.ForeColor = Color.FromArgb(22, 101, 52);
                        }
                        
                        listViewLobbyPlayers.Items.Add(item);
                    }
                }

                // Update status
                if (lblLobbyStatus != null)
                {
                    if (connectedPlayers.Count >= 2)
                    {
                        lblLobbyStatus.Text = "✅ Đã đủ người chơi - Có thể bắt đầu game!";
                        lblLobbyStatus.ForeColor = Color.FromArgb(40, 167, 69);
                        if (btnStartGameLobby != null) btnStartGameLobby.Enabled = true;
                    }
                    else
                    {
                        lblLobbyStatus.Text = "⏳ Cần thêm người chơi để bắt đầu...";
                        lblLobbyStatus.ForeColor = Color.FromArgb(255, 140, 0);
                        if (btnStartGameLobby != null) btnStartGameLobby.Enabled = false;
                    }
                }

                // Add welcome message to lobby chat with enhanced features
                if (listBoxLobbyChat != null && listBoxLobbyChat.Items.Count == 0)
                {
                    AddLobbyMessage("🤖 System", $"🏠 Chào mừng đến lobby phòng {currentRoomCode}!");
                    AddLobbyMessage("🤖 System", "💬 Hãy chat để làm quen với mọi người!");
                    AddLobbyMessage("🤖 System", "🎮 Nhấn 'Bắt đầu game' khi sẵn sàng!");
                    
                    // Add some lobby chat tips
                    AddLobbyMessage("💡 Tips", "Gõ '/help' để xem các lệnh chat có sẵn");
                    AddLobbyMessage("💡 Tips", "Sử dụng emoji để chat vui hơn! 😊🎨🎮");
                }
                
                System.Diagnostics.Debug.WriteLine("Đã cập nhật giao diện lobby với tính năng chat nâng cao");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"UpdateLobbyInterface Exception: {ex}");
            }
        }

        private void SendLobbyMessage()
        {
            string message = txtLobbyChat.Text.Trim();
            if (string.IsNullOrEmpty(message)) return;
            
            // Process lobby commands
            if (message.StartsWith("/"))
            {
                ProcessLobbyCommand(message);
                txtLobbyChat.Clear();
                return;
            }
            
            // Enhanced lobby message with emoji support
            string processedMessage = ProcessLobbyMessage(message);
            string timestamp = DateTime.Now.ToString("HH:mm");
            string chatLine = $"[{timestamp}] {currentUser}: {processedMessage}";
            
            // Add to chat
            listBoxLobbyChat.Items.Add(chatLine);
            
            // Auto-scroll to bottom
            if (listBoxLobbyChat.Items.Count > 0)
            {
                listBoxLobbyChat.TopIndex = listBoxLobbyChat.Items.Count - 1;
            }
            
            // Clear input
            txtLobbyChat.Clear();
            
            // Simulate other players reacting in lobby
            SimulateLobbyReactions(processedMessage);
            
            // Broadcast to other players (simulation)
            BroadcastLobbyMessage(currentUser, processedMessage);
        }

        private string ProcessLobbyMessage(string message)
        {
            // Add emoji enhancements
            var emojiReplacements = new Dictionary<string, string>
            {
                {":)", "😊"}, {":(", "😢"}, {":D", "😄"}, {":P", "😛"},
                {":o", "😮"}, {"<3", "❤️"}, {":*", "😘"}, {";)", "😉"},
                {"ready", "ready ✅"}, {"yes", "yes 👍"}, {"no", "no 👎"},
                {"good", "good 👌"}, {"nice", "nice 😎"}, {"lol", "lol 😂"},
                {"haha", "haha 😄"}, {"omg", "omg 😱"}, {"wow", "wow 😲"}
            };
            
            foreach (var replacement in emojiReplacements)
            {
                message = message.Replace(replacement.Key, replacement.Value);
            }
            
            return message;
        }

        private void ProcessLobbyCommand(string command)
        {
            command = command.ToLower();
            
            switch (command)
            {
                case "/help":
                    AddLobbyMessage("💡 Help", "Các lệnh có sẵn:");
                    AddLobbyMessage("💡 Help", "/help - Hiển thị trợ giúp");
                    AddLobbyMessage("💡 Help", "/players - Danh sách người chơi");
                    AddLobbyMessage("💡 Help", "/settings - Cài đặt phòng");
                    AddLobbyMessage("💡 Help", "/ready - Báo sẵn sàng");
                    AddLobbyMessage("💡 Help", "/emoji - Danh sách emoji");
                    break;
                    
                case "/players":
                    AddLobbyMessage("👥 Players", $"Có {connectedPlayers.Count} người trong phòng:");
                    foreach (var player in connectedPlayers)
                    {
                        string status = player.Name == currentUser ? "👑 (bạn)" : "👤";
                        AddLobbyMessage("👥 Players", $"• {player.Name} {status}");
                    }
                    break;
                    
                case "/settings":
                    AddLobbyMessage("⚙️ Settings", "Cài đặt phòng hiện tại:");
                    AddLobbyMessage("⚙️ Settings", $"• Số vòng: {currentGameSettings?.Rounds ?? 5}");
                    AddLobbyMessage("⚙️ Settings", $"• Thời gian: {currentGameSettings?.TimePerRound ?? 60}s/vòng");
                    AddLobbyMessage("⚙️ Settings", $"• Độ khó: {currentGameSettings?.Difficulty ?? "Normal"}");
                    AddLobbyMessage("⚙️ Settings", $"• Max players: {currentGameSettings?.MaxPlayers ?? 8}");
                    break;
                    
                case "/ready":
                    AddLobbyMessage("✅ Ready", $"{currentUser} đã sẵn sàng chơi!");
                    // Simulate others saying ready too
                    SimulateLobbyReadyResponses();
                    break;
                    
                case "/emoji":
                    AddLobbyMessage("😊 Emoji", "Emoji shortcuts:");
                    AddLobbyMessage("😊 Emoji", ":) = 😊  :( = 😢  :D = 😄  :P = 😛");
                    AddLobbyMessage("😊 Emoji", ":o = 😮  <3 = ❤️  :* = 😘  ;) = 😉");
                    break;
                    
                default:
                    AddLobbyMessage("❌ Error", $"Lệnh '{command}' không tồn tại. Gõ /help để xem trợ giúp.");
                    break;
            }
        }

        private void SimulateLobbyReactions(string message)
        {
            if (connectedPlayers.Count <= 1) return;
            
            var otherPlayers = connectedPlayers.Where(p => p.Name != currentUser).ToList();
            if (!otherPlayers.Any()) return;
            
            // Random chance for reactions in lobby
            if (random.Next(100) < 40) // 40% chance
            {
                var reactingPlayer = otherPlayers[random.Next(otherPlayers.Count)];
                
                var reactions = new[]
                {
                    "😄 haha!", "👍 đồng ý!", "🤔 hmm...", "😮 thật không?", 
                    "👏 hay!", "😅 funny!", "❤️", "🔥", "💯", "✨ nice!",
                    "me too!", "same here!", "lets go!", "ready!", "excited! 🎮"
                };
                
                var reaction = reactions[random.Next(reactions.Length)];
                
                // Delay reaction for realism
                var reactionTimer = new Timer { Interval = random.Next(1500, 4000) };
                reactionTimer.Tick += (s, e) =>
                {
                    reactionTimer.Stop();
                    reactionTimer.Dispose();
                    AddLobbyMessage(reactingPlayer.Name, reaction);
                };
                reactionTimer.Start();
            }
        }

        private void SimulateLobbyReadyResponses()
        {
            var otherPlayers = connectedPlayers.Where(p => p.Name != currentUser).ToList();
            
            foreach (var player in otherPlayers)
            {
                if (random.Next(100) < 60) // 60% chance each player responds
                {
                    var responses = new[] { "ready too! ✅", "lets start! 🚀", "im ready 🎮", "go go go! 💨" };
                    var response = responses[random.Next(responses.Length)];
                    
                    var delay = random.Next(2000, 6000); // 2-6 seconds delay
                    var timer = new Timer { Interval = delay };
                    timer.Tick += (s, e) =>
                    {
                        timer.Stop();
                        timer.Dispose();
                        AddLobbyMessage(player.Name, response);
                    };
                    timer.Start();
                }
            }
        }

        private void BroadcastLobbyMessage(string sender, string message)
        {
            // In a real multiplayer implementation, this would send the message to all connected players
            // For now, we'll just simulate some responses
            
            if (random.Next(100) < 25) // 25% chance for auto-responses
            {
                var autoResponses = new[]
                {
                    "nice!", "cool!", "agreed!", "same!", "+1", "👍", "😊", 
                    "interesting!", "good point!", "lol", "haha"
                };
                
                var otherPlayers = connectedPlayers.Where(p => p.Name != sender).ToList();
                if (otherPlayers.Any())
                {
                    var respondingPlayer = otherPlayers[random.Next(otherPlayers.Count)];
                    var response = autoResponses[random.Next(autoResponses.Length)];
                    
                    var timer = new Timer { Interval = random.Next(3000, 8000) };
                    timer.Tick += (s, e) =>
                    {
                        timer.Stop();
                        timer.Dispose();
                        AddLobbyMessage(respondingPlayer.Name, response);
                    };
                    timer.Start();
                }
            }
        }

        #endregion
    }
}